/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fromEvent, Observable } from 'rxjs';
import { map, publishReplay, refCount, startWith } from 'rxjs/operators';
var MzMediaService = /** @class */ (function () {
    function MzMediaService() {
        this.mediaBreakpoints = [
            { alias: 's', minWidth: 0, maxWidth: 600 },
            { alias: 'm', minWidth: 601, maxWidth: 992 },
            { alias: 'l', minWidth: 993, maxWidth: 1200 },
            { alias: 'xl', minWidth: 1201, maxWidth: Number.MAX_VALUE },
        ];
        this.matchOperators = [
            {
                operator: 'gt',
                match: function (breakpoint) { return window.innerWidth > breakpoint.maxWidth; },
            },
            {
                operator: 'lt',
                match: function (breakpoint) { return window.innerWidth < breakpoint.minWidth; },
            },
            {
                operator: null,
                match: function (breakpoint) { return window.innerWidth >= breakpoint.minWidth && window.innerWidth <= breakpoint.maxWidth; },
            },
        ];
        this.media = this.registerWindowResizeListener();
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    MzMediaService.prototype.isActive = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        var _this = this;
        return new Observable(function (subscriber) {
            _this.media.subscribe(function (media) {
                try {
                    subscriber.next(_this.isActiveBreakpoint(breakpoint));
                }
                catch (/** @type {?} */ error) {
                    subscriber.error(error);
                }
            });
        });
    };
    /**
     * @return {?}
     */
    MzMediaService.prototype.registerWindowResizeListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return fromEvent(window, 'resize')
            .pipe(map(function () { return _this.getWindowMedia(); }), startWith(this.getWindowMedia()), publishReplay(1), refCount());
    };
    /**
     * @return {?}
     */
    MzMediaService.prototype.getWindowMedia = /**
     * @return {?}
     */
    function () {
        return {
            alias: this.mediaBreakpoints.find(function (breakpoint) { return window.innerWidth <= breakpoint.maxWidth; }).alias,
            windowHeight: window.innerHeight,
            windowWidth: window.innerWidth,
        };
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    MzMediaService.prototype.isActiveBreakpoint = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        var /** @type {?} */ matchOperator;
        var /** @type {?} */ mediaBreakpoint;
        if (breakpoint) {
            var /** @type {?} */ fragments_1 = breakpoint.split('-');
            if (fragments_1.length === 1) {
                matchOperator = this.matchOperators.find(function (x) { return x.operator === null; });
                mediaBreakpoint = this.mediaBreakpoints.find(function (x) { return x.alias === fragments_1[0]; });
            }
            else if (fragments_1.length === 2) {
                matchOperator = this.matchOperators.find(function (x) { return x.operator === fragments_1[0]; });
                mediaBreakpoint = this.mediaBreakpoints.find(function (x) { return x.alias === fragments_1[1]; });
            }
        }
        if (!mediaBreakpoint || !matchOperator) {
            throw Error("MzMediaService.isActive parameter is invalid: '" + breakpoint + "' is not a recognized breakpoint.");
        }
        return matchOperator.match(mediaBreakpoint);
    };
    MzMediaService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MzMediaService.ctorParameters = function () { return []; };
    return MzMediaService;
}());
export { MzMediaService };
function MzMediaService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MzMediaService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MzMediaService.ctorParameters;
    /** @type {?} */
    MzMediaService.prototype.media;
    /** @type {?} */
    MzMediaService.prototype.mediaBreakpoints;
    /** @type {?} */
    MzMediaService.prototype.matchOperators;
}

//# sourceMappingURL=data:application/json;base64,