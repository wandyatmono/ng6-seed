(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib'), require('@angular/common'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('ngx-materialize', ['exports', '@angular/core', 'tslib', '@angular/common', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/animations'], factory) :
    (factory((global['ngx-materialize'] = {}),global.ng.core,global.tslib,global.ng.common,global.ng.forms,null,global.Rx.Observable.prototype,global.ng.animations));
}(this, (function (exports,core,tslib_1,common,forms,rxjs,operators,animations) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzBadgeComponent = (function () {
        function MzBadgeComponent() {
        }
        MzBadgeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-badge',
                        template: "<span #badge\n  class=\"badge {{ badgeClass }}\"\n  [class.new]=\"new || !!badgeClass\"\n  [attr.data-badge-caption]=\"caption\">\n  {{ value }}\n</span>\n",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzBadgeComponent.propDecorators = {
            "badgeClass": [{ type: core.Input },],
            "caption": [{ type: core.Input },],
            "new": [{ type: core.Input },],
            "value": [{ type: core.Input },],
        };
        return MzBadgeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzBadgeModule = (function () {
        function MzBadgeModule() {
        }
        MzBadgeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzBadgeComponent],
                        exports: [MzBadgeComponent],
                    },] },
        ];
        return MzBadgeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ Handlers = (function () {
        function Handlers() {
        }
        return Handlers;
    }());
    var HandlePropChanges = (function () {
        function HandlePropChanges() {
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        HandlePropChanges.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.handlers) {
                    this.executePropHandlers(changes);
                }
            };
        /**
         * @param {?=} props
         * @return {?}
         */
        HandlePropChanges.prototype.executePropHandlers = /**
         * @param {?=} props
         * @return {?}
         */
            function (props) {
                var _this = this;
                if (props === void 0) {
                    props = this.handlers;
                }
                Object.keys(props).forEach(function (prop) {
                    if (_this.handlers[prop]) {
                        var /** @type {?} */ previousValue = ((props[prop])).previousValue;
                        _this.handlers[prop](previousValue);
                    }
                });
            };
        return HandlePropChanges;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInjectionService = (function () {
        function MzInjectionService(applicationRef, componentFactoryResolver, injector) {
            this.applicationRef = applicationRef;
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
        }
        /**
         * Appends a component to an adjacent location.
         */
        /**
         * Appends a component to an adjacent location.
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
        MzInjectionService.prototype.appendComponent = /**
         * Appends a component to an adjacent location.
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
            function (componentClass, options, location) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                if (location === void 0) {
                    location = this.getContainerElement();
                }
                // instantiate component to load
                var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
                var /** @type {?} */ componentRef = componentFactory.create(this.injector);
                // project the options passed to the component instance
                this.projectComponentInputs(componentRef, options);
                // attach view for dirty checking
                this.applicationRef.attachView(componentRef.hostView);
                // detach view when component is destroyed
                componentRef.onDestroy(function () {
                    _this.applicationRef.detachView(componentRef.hostView);
                });
                // append component to location in the DOM where we want it to be rendered
                var /** @type {?} */ componentRootNode = this.getComponentRootNode(componentRef);
                location.appendChild(componentRootNode);
                return componentRef;
            };
        /**
         * Overrides the default container element.
         */
        /**
         * Overrides the default container element.
         * @param {?} container
         * @return {?}
         */
        MzInjectionService.prototype.setRootViewContainer = /**
         * Overrides the default container element.
         * @param {?} container
         * @return {?}
         */
            function (container) {
                this.container = container;
            };
        /**
         * Gets the html element for a component ref.
         * @param {?} componentRef
         * @return {?}
         */
        MzInjectionService.prototype.getComponentRootNode = /**
         * Gets the html element for a component ref.
         * @param {?} componentRef
         * @return {?}
         */
            function (componentRef) {
                return /** @type {?} */ (((componentRef.hostView)).rootNodes[0]);
            };
        /**
         * Gets the container element.
         * @return {?}
         */
        MzInjectionService.prototype.getContainerElement = /**
         * Gets the container element.
         * @return {?}
         */
            function () {
                return this.container || document.body;
            };
        /**
         * Projects the inputs onto the component.
         * @template T
         * @param {?} component
         * @param {?} options
         * @return {?}
         */
        MzInjectionService.prototype.projectComponentInputs = /**
         * Projects the inputs onto the component.
         * @template T
         * @param {?} component
         * @param {?} options
         * @return {?}
         */
            function (component, options) {
                if (options) {
                    var /** @type {?} */ props = Object.getOwnPropertyNames(options);
                    try {
                        for (var props_1 = tslib_1.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                            var prop = props_1_1.value;
                            component.instance[prop] = options[prop];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                                _a.call(props_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                return component;
                var e_1, _a;
            };
        MzInjectionService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        MzInjectionService.ctorParameters = function () {
            return [
                { type: core.ApplicationRef, },
                { type: core.ComponentFactoryResolver, },
                { type: core.Injector, },
            ];
        };
        return MzInjectionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInjectionModule = (function () {
        function MzInjectionModule() {
        }
        MzInjectionModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [MzInjectionService],
                    },] },
        ];
        return MzInjectionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var MzRemoveComponentHost = (function () {
        function MzRemoveComponentHost(elementRef) {
            this.elementRef = elementRef;
            this.childrenElement = [];
        }
        /**
         * @return {?}
         */
        MzRemoveComponentHost.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ hostElement = this.elementRef.nativeElement;
                this.parentElement = hostElement.parentElement;
                // move child out of the host element
                while (hostElement.firstChild) {
                    this.childrenElement.push(this.parentElement.insertBefore(hostElement.firstChild, hostElement));
                }
            };
        /**
         * @return {?}
         */
        MzRemoveComponentHost.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // remove moved out element
                this.childrenElement.forEach(function (childElement) { return _this.parentElement.removeChild(childElement); });
            };
        /** @nocollapse */
        MzRemoveComponentHost.ctorParameters = function () {
            return [
                { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] },] },
            ];
        };
        return MzRemoveComponentHost;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzButtonDirective = (function (_super) {
        tslib_1.__extends(MzButtonDirective, _super);
        function MzButtonDirective(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initMaterialize();
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    disabled: function () { return _this.handleDisabled(); },
                    flat: function () { return _this.handleFlat(); },
                    float: function () { return _this.handleFloat(); },
                    large: function () { return _this.handleLarge(); },
                    noWaves: function () { return _this.handleNoWaves(); },
                };
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.initMaterialize = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', true);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.handleDisabled = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'disabled', this.disabled);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.handleFlat = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', !this.flat);
                this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-flat', this.flat);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.handleFloat = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-floating', this.float);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.handleLarge = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-large', this.large);
            };
        /**
         * @return {?}
         */
        MzButtonDirective.prototype.handleNoWaves = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-effect', !this.noWaves);
                if (!this.flat) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-light', !this.noWaves);
                }
            };
        MzButtonDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "\n    a[mz-button],\n    a[mzButton],\n    button[mz-button],\n    button[mzButton]",
                    },] },
        ];
        /** @nocollapse */
        MzButtonDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzButtonDirective.propDecorators = {
            "disabled": [{ type: core.Input },],
            "flat": [{ type: core.Input },],
            "float": [{ type: core.Input },],
            "large": [{ type: core.Input },],
            "noWaves": [{ type: core.Input },],
        };
        return MzButtonDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzButtonModule = (function () {
        function MzButtonModule() {
        }
        MzButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzButtonDirective],
                        exports: [MzButtonDirective],
                    },] },
        ];
        return MzButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCardComponent = (function () {
        function MzCardComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.hasCardAction = true;
            this.hasCardTitle = true;
        }
        /**
         * @return {?}
         */
        MzCardComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.hasCardTitle = this.hasTitleTagAndNotEmpty();
                this.hasCardAction = this.hasActionTagAndNotEmpty();
                this.changeDetectorRef.detectChanges();
            };
        /**
         * @return {?}
         */
        MzCardComponent.prototype.hasActionTagAndNotEmpty = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ cardActionElement = this.cardAction.nativeElement.querySelector('mz-card-action');
                return this.isElementDisplayed(cardActionElement);
            };
        /**
         * @return {?}
         */
        MzCardComponent.prototype.hasTitleTagAndNotEmpty = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ cardTitleElement = this.cardTitle.nativeElement.querySelector('mz-card-title');
                return this.isElementDisplayed(cardTitleElement);
            };
        /**
         * @param {?} element
         * @return {?}
         */
        MzCardComponent.prototype.isElementDisplayed = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                return element && element.innerHTML.trim() !== '';
            };
        MzCardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-card',
                        template: "<div class=\"card-content\">\n\n  <div #cardTitle class=\"card-title\" *ngIf=\"hasCardTitle\">\n    <ng-content select=\"mz-card-title\"></ng-content>\n  </div>\n\n  <ng-content select=\"mz-card-content\"></ng-content>\n</div>\n\n<div #cardAction class=\"card-action\" *ngIf=\"hasCardAction\">\n  <ng-content select=\"mz-card-action\"></ng-content>\n</div>",
                        styles: [":host{display:block}"],
                    },] },
        ];
        /** @nocollapse */
        MzCardComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef, },
            ];
        };
        MzCardComponent.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.card',] },],
            "hoverable": [{ type: core.HostBinding, args: ['class.hoverable',] }, { type: core.Input },],
            "cardTitle": [{ type: core.ViewChild, args: ['cardTitle',] },],
            "cardAction": [{ type: core.ViewChild, args: ['cardAction',] },],
        };
        return MzCardComponent;
    }());
    var MzCardTitleDirective = (function () {
        function MzCardTitleDirective() {
        }
        MzCardTitleDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-card-title' },] },
        ];
        return MzCardTitleDirective;
    }());
    var MzCardContentDirective = (function () {
        function MzCardContentDirective() {
        }
        MzCardContentDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-card-content' },] },
        ];
        return MzCardContentDirective;
    }());
    var MzCardActionDirective = (function () {
        function MzCardActionDirective() {
        }
        MzCardActionDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-card-action' },] },
        ];
        return MzCardActionDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCardModule = (function () {
        function MzCardModule() {
        }
        MzCardModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            MzCardActionDirective,
                            MzCardComponent,
                            MzCardContentDirective,
                            MzCardTitleDirective,
                        ],
                        exports: [
                            MzCardActionDirective,
                            MzCardComponent,
                            MzCardContentDirective,
                            MzCardTitleDirective,
                        ],
                    },] },
        ];
        return MzCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCheckboxContainerComponent = (function () {
        function MzCheckboxContainerComponent() {
        }
        MzCheckboxContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-checkbox-container',
                        template: "<p class=\"checkbox-field\">\n  <ng-content></ng-content>\n</p>",
                        styles: [""],
                    },] },
        ];
        return MzCheckboxContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCheckboxDirective = (function (_super) {
        tslib_1.__extends(MzCheckboxDirective, _super);
        function MzCheckboxDirective(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    filledIn: function () { return _this.handleFilledIn(); },
                    label: function () { return _this.handleLabel(); },
                };
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.checkboxElement = $(this.elementRef.nativeElement);
                this.checkboxContainerElement = $(this.elementRef.nativeElement).parent('.checkbox-field');
                this.labelElement = this.createLabelElement();
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.checkboxElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.checkboxContainerElement.length === 0) {
                    console.error('Input with mz-checkbox directive must be placed inside a [mz-checkbox-container] tag', this.checkboxElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzCheckboxDirective.prototype.handleFilledIn = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.checkboxElement[0], 'filled-in', this.filledIn);
            };
        MzCheckboxDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mzCheckbox], input[mz-checkbox]',
                    },] },
        ];
        /** @nocollapse */
        MzCheckboxDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzCheckboxDirective.propDecorators = {
            "id": [{ type: core.HostBinding }, { type: core.Input },],
            "filledIn": [{ type: core.Input },],
            "label": [{ type: core.Input },],
        };
        return MzCheckboxDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCheckboxModule = (function () {
        function MzCheckboxModule() {
        }
        MzCheckboxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzCheckboxDirective,
                            MzCheckboxContainerComponent,
                        ],
                        exports: [
                            MzCheckboxDirective,
                            MzCheckboxContainerComponent,
                        ],
                    },] },
        ];
        return MzCheckboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzChipInputComponent = (function () {
        function MzChipInputComponent(elementRef, zone) {
            this.elementRef = elementRef;
            this.zone = zone;
            this.add = new core.EventEmitter();
            this.delete = new core.EventEmitter();
            this.select = new core.EventEmitter();
            this.onChangeCallback = function (data) { };
        }
        Object.defineProperty(MzChipInputComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return /** @type {?} */ (this.chipInputElement.material_chip('data'));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzChipInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initElements();
                this.initMaterializeChip();
            };
        /**
         * @return {?}
         */
        MzChipInputComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.chipInputElement.off('chip.add');
                this.chipInputElement.off('chip.delete');
                this.chipInputElement.off('chip.select');
            };
        /**
         * @return {?}
         */
        MzChipInputComponent.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.chipInputElement = $(this.elementRef.nativeElement);
            };
        /**
         * @param {?=} value
         * @return {?}
         */
        MzChipInputComponent.prototype.initMaterializeChip = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                // fix issue autocomplete is not a function
                // https://github.com/Dogfalo/materialize/issues/4401
                this.zone.runOutsideAngular(function () {
                    setTimeout(function () {
                        _this.chipInputElement.material_chip({
                            autocompleteOptions: _this.autocompleteOptions,
                            data: value || _this.value,
                            placeholder: _this.placeholder,
                            secondaryPlaceholder: _this.secondaryPlaceholder,
                        });
                    });
                });
                this.chipInputElement.on('chip.add', function (event, chip) {
                    _this.onChangeCallback(_this.value);
                    _this.add.emit(chip);
                });
                this.chipInputElement.on('chip.delete', function (event, chip) {
                    _this.onChangeCallback(_this.value);
                    _this.delete.emit(chip);
                });
                this.chipInputElement.on('chip.select', function (event, chip) {
                    _this.select.emit(chip);
                });
            };
        //#region ControlValueAccessor
        /**
         * @param {?} fn
         * @return {?}
         */
        MzChipInputComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MzChipInputComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        MzChipInputComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) { };
        /**
         * @param {?} value
         * @return {?}
         */
        MzChipInputComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value && value !== this.value) {
                    this.initMaterializeChip(value);
                }
            };
        MzChipInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-chip-input',
                        template: "",
                        styles: [":host{display:block}"],
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return MzChipInputComponent; }),
                                multi: true,
                            },
                        ],
                    },] },
        ];
        /** @nocollapse */
        MzChipInputComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.NgZone, },
            ];
        };
        MzChipInputComponent.propDecorators = {
            "autocompleteOptions": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "secondaryPlaceholder": [{ type: core.Input },],
            "add": [{ type: core.Output },],
            "delete": [{ type: core.Output },],
            "select": [{ type: core.Output },],
        };
        return MzChipInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzChipComponent = (function () {
        function MzChipComponent(elementRef) {
            this.elementRef = elementRef;
            this.chipClass = true;
            this.close = false;
            this.delete = new core.EventEmitter();
        }
        Object.defineProperty(MzChipComponent.prototype, "chipElement", {
            get: /**
             * @return {?}
             */ function () {
                return /** @type {?} */ (this.elementRef.nativeElement);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzChipComponent.prototype.onDelete = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ value = '';
                for (var /** @type {?} */ i = 0; i < this.chipElement.childNodes.length; i++) {
                    if (this.chipElement.childNodes.item(i).nodeType === Node.TEXT_NODE) {
                        value += this.chipElement.childNodes.item(i).nodeValue;
                    }
                }
                this.delete.emit(value.trim());
            };
        MzChipComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-chip',
                        template: "<ng-content></ng-content>\n<i class=\"close material-icons\" (click)=\"onDelete()\" *ngIf=\"close\">close</i>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzChipComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        MzChipComponent.propDecorators = {
            "chipClass": [{ type: core.HostBinding, args: ['class.chip',] },],
            "close": [{ type: core.Input },],
            "delete": [{ type: core.Output },],
        };
        return MzChipComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzChipModule = (function () {
        function MzChipModule() {
        }
        MzChipModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            MzChipComponent,
                            MzChipInputComponent,
                        ],
                        exports: [
                            MzChipComponent,
                            MzChipInputComponent,
                        ],
                    },] },
        ];
        return MzChipModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollapsibleItemComponent = (function (_super) {
        tslib_1.__extends(MzCollapsibleItemComponent, _super);
        function MzCollapsibleItemComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MzCollapsibleItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-collapsible-item',
                        template: "<li>\n  <div class=\"collapsible-header\"\n    [class.active]=\"active\"\n  >\n    <ng-content select=\"mz-collapsible-item-header\"></ng-content>\n  </div>\n  <div class=\"collapsible-body\">\n    <ng-content select=\"mz-collapsible-item-body\"></ng-content>\n  </div>\n</li>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzCollapsibleItemComponent.propDecorators = {
            "active": [{ type: core.Input },],
        };
        return MzCollapsibleItemComponent;
    }(MzRemoveComponentHost));
    var MzCollapsibleItemBodyDirective = (function () {
        function MzCollapsibleItemBodyDirective() {
        }
        MzCollapsibleItemBodyDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-collapsible-item-body' },] },
        ];
        return MzCollapsibleItemBodyDirective;
    }());
    var MzCollapsibleItemHeaderDirective = (function () {
        function MzCollapsibleItemHeaderDirective() {
        }
        MzCollapsibleItemHeaderDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-collapsible-item-header' },] },
        ];
        return MzCollapsibleItemHeaderDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollapsibleComponent = (function () {
        function MzCollapsibleComponent(renderer) {
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzCollapsibleComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.handleDataCollapsible();
                this.initCollapsible();
            };
        /**
         * @return {?}
         */
        MzCollapsibleComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                $(this.collapsible.nativeElement).collapsible('destroy');
            };
        /**
         * @param {?} collapsibleItemIndex
         * @return {?}
         */
        MzCollapsibleComponent.prototype.close = /**
         * @param {?} collapsibleItemIndex
         * @return {?}
         */
            function (collapsibleItemIndex) {
                $(this.collapsible.nativeElement).collapsible('close', collapsibleItemIndex);
            };
        /**
         * @return {?}
         */
        MzCollapsibleComponent.prototype.initCollapsible = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ options = {
                    accordion: false,
                    onClose: this.onClose,
                    onOpen: this.onOpen,
                };
                $(this.collapsible.nativeElement).collapsible(options);
            };
        /**
         * @return {?}
         */
        MzCollapsibleComponent.prototype.handleDataCollapsible = /**
         * @return {?}
         */
            function () {
                if (this.mode) {
                    this.renderer.setElementAttribute(this.collapsible.nativeElement, 'data-collapsible', this.mode);
                }
            };
        /**
         * @param {?} collapsibleItemIndex
         * @return {?}
         */
        MzCollapsibleComponent.prototype.open = /**
         * @param {?} collapsibleItemIndex
         * @return {?}
         */
            function (collapsibleItemIndex) {
                $(this.collapsible.nativeElement).collapsible('open', collapsibleItemIndex);
            };
        MzCollapsibleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-collapsible',
                        template: "<ul #collapsible\n  class=\"collapsible\"\n  [class.popout]=\"popout\"\n  [hidden]=\"items.length === 0\"\n>\n  <ng-content></ng-content>\n</ul>",
                        styles: ["/deep/ .collapsible-header{clear:both}/deep/ .collapsible-body{clear:both}"],
                    },] },
        ];
        /** @nocollapse */
        MzCollapsibleComponent.ctorParameters = function () {
            return [
                { type: core.Renderer, },
            ];
        };
        MzCollapsibleComponent.propDecorators = {
            "mode": [{ type: core.Input },],
            "onClose": [{ type: core.Input },],
            "onOpen": [{ type: core.Input },],
            "popout": [{ type: core.Input },],
            "collapsible": [{ type: core.ViewChild, args: ['collapsible',] },],
            "items": [{ type: core.ContentChildren, args: [MzCollapsibleItemComponent,] },],
        };
        return MzCollapsibleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollapsibleModule = (function () {
        function MzCollapsibleModule() {
        }
        MzCollapsibleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzCollapsibleComponent,
                            MzCollapsibleItemBodyDirective,
                            MzCollapsibleItemComponent,
                            MzCollapsibleItemHeaderDirective,
                        ],
                        exports: [
                            MzCollapsibleComponent,
                            MzCollapsibleItemBodyDirective,
                            MzCollapsibleItemComponent,
                            MzCollapsibleItemHeaderDirective,
                        ],
                    },] },
        ];
        return MzCollapsibleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzAvatarDirective = (function () {
        function MzAvatarDirective() {
        }
        MzAvatarDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mzAvatar], [mz-avatar]',
                    },] },
        ];
        /** @nocollapse */
        MzAvatarDirective.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.circle',] },],
        };
        return MzAvatarDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollectionHeaderComponent = (function () {
        function MzCollectionHeaderComponent() {
        }
        MzCollectionHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-collection-header',
                        template: "<div class=\"collection-header\">\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        return MzCollectionHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollectionItemComponent = (function () {
        function MzCollectionItemComponent() {
        }
        MzCollectionItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-collection-item',
                        template: "<ng-content></ng-content>",
                        styles: [":host{display:block}"],
                    },] },
        ];
        /** @nocollapse */
        MzCollectionItemComponent.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.collection-item',] },],
            "avatar": [{ type: core.HostBinding, args: ['class.avatar',] }, { type: core.Input },],
            "dismissable": [{ type: core.HostBinding, args: ['class.dismissable',] }, { type: core.Input },],
        };
        return MzCollectionItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollectionLinkDirective = (function () {
        function MzCollectionLinkDirective() {
        }
        MzCollectionLinkDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mzCollectionLink], [mz-collection-link]',
                    },] },
        ];
        /** @nocollapse */
        MzCollectionLinkDirective.propDecorators = {
            "active": [{ type: core.HostBinding, args: ['class.active',] }, { type: core.Input },],
            "true": [{ type: core.HostBinding, args: ['class.collection-item',] },],
        };
        return MzCollectionLinkDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollectionComponent = (function () {
        function MzCollectionComponent(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzCollectionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initElements();
                this.initCollectionHeader();
            };
        /**
         * @return {?}
         */
        MzCollectionComponent.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.collectionElement = $(this.elementRef.nativeElement).find('.collection');
                this.collectionHeaderElement = $(this.elementRef.nativeElement).find('.collection-header');
            };
        /**
         * @return {?}
         */
        MzCollectionComponent.prototype.initCollectionHeader = /**
         * @return {?}
         */
            function () {
                if (this.collectionHeaderElement.length > 0) {
                    this.renderer.addClass(this.collectionElement[0], 'with-header');
                }
            };
        MzCollectionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-collection',
                        template: "<div class=\"collection\">\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzCollectionComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
            ];
        };
        return MzCollectionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSecondaryContentDirective = (function () {
        function MzSecondaryContentDirective() {
        }
        MzSecondaryContentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mzSecondaryContent], [mz-secondary-content]',
                    },] },
        ];
        /** @nocollapse */
        MzSecondaryContentDirective.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.secondary-content',] },],
        };
        return MzSecondaryContentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzCollectionModule = (function () {
        function MzCollectionModule() {
        }
        MzCollectionModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzAvatarDirective,
                            MzCollectionComponent,
                            MzCollectionItemComponent,
                            MzCollectionLinkDirective,
                            MzCollectionHeaderComponent,
                            MzSecondaryContentDirective,
                        ],
                        exports: [
                            MzAvatarDirective,
                            MzCollectionComponent,
                            MzCollectionItemComponent,
                            MzCollectionLinkDirective,
                            MzCollectionHeaderComponent,
                            MzSecondaryContentDirective,
                        ],
                    },] },
        ];
        return MzCollectionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDatepickerContainerComponent = (function () {
        function MzDatepickerContainerComponent() {
        }
        MzDatepickerContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-datepicker-container',
                        template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzDatepickerContainerComponent.propDecorators = {
            "inline": [{ type: core.Input },],
        };
        return MzDatepickerContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDatepickerDirective = (function (_super) {
        tslib_1.__extends(MzDatepickerDirective, _super);
        function MzDatepickerDirective(ngControl, changeDetectorRef, elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.changeDetectorRef = changeDetectorRef;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            // materialize uses pickadate.js to create the datepicker
            // complete list of options is available at the following address
            // http://amsul.ca/pickadate.js/date/#options
            _this.options = {};
            _this.isInitRound = true;
            _this.stopChangePropagation = false;
            return _this;
        }
        Object.defineProperty(MzDatepickerDirective.prototype, "format", {
            get: /**
             * @return {?}
             */ function () {
                return this.options.format || this.options.formatSubmit || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzDatepickerDirective.prototype, "formatSubmit", {
            get: /**
             * @return {?}
             */ function () {
                return this.options.formatSubmit || this.options.format || null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzDatepickerDirective.prototype, "ngControlValue", {
            get: /**
             * @return {?}
             */ function () {
                return this.ngControl.value === '' ? null : this.ngControl.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzDatepickerDirective.prototype, "picker", {
            get: /**
             * @return {?}
             */ function () {
                return this.inputElement.pickadate('picker');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.initDatepicker();
                this.initInputSubscription();
                this.handleProperties();
                this.isInitRound = false;
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.inputValueSubscription) {
                    this.inputValueSubscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    label: function () { return _this.handleLabel(); },
                    options: function () { return _this.handleOptions(); },
                    placeholder: function () { return _this.handlePlaceholder(); },
                };
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
                this.inputElement = $(this.elementRef.nativeElement);
                this.labelElement = this.createLabelElement();
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.initDatepicker = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // set default format/formatSubmit options
                if (this.format) {
                    this.options.format = this.format;
                }
                if (this.formatSubmit) {
                    this.options.formatSubmit = this.formatSubmit;
                }
                // extends onClose function to fix datepicker focus issue
                // https://github.com/Dogfalo/materialize/issues/2067#issuecomment-142107599
                var /** @type {?} */ onCloseFn = this.options && this.options.onClose || (function () { });
                this.options = Object.assign({}, this.options, {
                    onClose: function (event) {
                        onCloseFn(event);
                        _this.renderer.invokeElementMethod(document.activeElement, 'blur');
                    },
                });
                this.renderer.invokeElementMethod(this.inputElement, 'pickadate', [this.options]);
                if (this.ngControl) {
                    // set datepicker initial value according to ngControl
                    this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
                    // set ngControl value according to selected date in datepicker
                    this.picker.on('set', function () {
                        // handle stop propagation
                        if (_this.stopChangePropagation) {
                            _this.stopChangePropagation = false;
                            return;
                        }
                        else {
                            _this.stopChangePropagation = true;
                        }
                        // apply options.formatSubmit to ngControl value
                        var /** @type {?} */ submitValue = _this.formatSubmit
                            ? _this.picker.get('select', _this.formatSubmit)
                            : _this.picker.get('value');
                        _this.ngControl.control.setValue(submitValue);
                        // apply options.format to input text
                        var /** @type {?} */ formatValue = _this.format
                            ? _this.picker.get('select', _this.format)
                            : _this.picker.get('value');
                        _this.inputElement.val(formatValue);
                        // set label active status
                        // set label active status
                        _this.setLabelActive();
                        // mark for change detection
                        // fix form validation with ChangeDetectionStrategy.OnPush
                        // mark for change detection
                        // fix form validation with ChangeDetectionStrategy.OnPush
                        _this.changeDetectorRef.markForCheck();
                    });
                }
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.initInputSubscription = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.ngControl) {
                    this.inputValueSubscription = this.ngControl.valueChanges.subscribe(function () {
                        // handle stop propagation
                        if (_this.stopChangePropagation) {
                            _this.stopChangePropagation = false;
                            return;
                        }
                        else {
                            _this.stopChangePropagation = true;
                        }
                        // set selected date in datepicker according to ngControl value
                        // set selected date in datepicker according to ngControl value
                        _this.picker.set('select', _this.ngControlValue, { format: _this.formatSubmit });
                        // set label active status
                        // set label active status
                        _this.setLabelActive();
                    });
                }
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.inputContainerElement.length === 0) {
                    console.error('Input with mz-datepicker directive must be placed inside an [mz-datepicker-container] tag', this.inputElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.handleOptions = /**
         * @return {?}
         */
            function () {
                if (!this.isInitRound) {
                    this.picker.set(this.options);
                }
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.handlePlaceholder = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
                this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
                // fix issue in IE where having a placeholder on input make control dirty and trigger validation
                // on page load... note that it still trigger validation on focus and would need a better fix
                // issue : https://github.com/angular/angular/issues/15299
                // workaround : https://stackoverflow.com/a/44967245/5583283
                if (this.ngControl) {
                    setTimeout(function () { return _this.ngControl.control.markAsPristine(); });
                }
                this.setLabelActive();
            };
        /**
         * @return {?}
         */
        MzDatepickerDirective.prototype.setLabelActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // need setTimeout otherwise it wont make label float in some circonstances (forcing validation for example)
                setTimeout(function () {
                    var /** @type {?} */ inputValue = ((_this.inputElement[0])).value;
                    var /** @type {?} */ isActive = !!_this.placeholder || !!inputValue;
                    _this.renderer.setElementClass(_this.labelElement[0], 'active', isActive);
                });
            };
        MzDatepickerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mzDatepicker], input[mz-datepicker]',
                    },] },
        ];
        /** @nocollapse */
        MzDatepickerDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: core.Optional },] },
                { type: core.ChangeDetectorRef, },
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzDatepickerDirective.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.datepicker',] },],
            "id": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "options": [{ type: core.Input },],
        };
        return MzDatepickerDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDatepickerModule = (function () {
        function MzDatepickerModule() {
        }
        MzDatepickerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzDatepickerDirective,
                            MzDatepickerContainerComponent,
                        ],
                        exports: [
                            MzDatepickerDirective,
                            MzDatepickerContainerComponent,
                        ],
                    },] },
        ];
        return MzDatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDropdownDividerComponent = (function () {
        function MzDropdownDividerComponent() {
        }
        MzDropdownDividerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-dropdown-divider',
                        template: "<li class=\"divider\"></li>",
                        styles: [""],
                    },] },
        ];
        return MzDropdownDividerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDropdownItemComponent = (function () {
        function MzDropdownItemComponent() {
        }
        MzDropdownItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-dropdown-item',
                        template: "<li>\n  <ng-content></ng-content>\n</li>",
                        styles: [""],
                    },] },
        ];
        return MzDropdownItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDropdownComponent = (function (_super) {
        tslib_1.__extends(MzDropdownComponent, _super);
        function MzDropdownComponent(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initDropdownButtonElement();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () { return _this.renderer.invokeElementMethod(_this.dropdownButtonElement, 'dropdown', ['close']); });
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.initDropdownButtonElement = /**
         * @return {?}
         */
            function () {
                this.dropdownButtonElement = $("#" + this.dropdownButtonId);
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    align: function () { return _this.handleDropdown(); },
                    belowOrigin: function () { return _this.handleDropdown(); },
                    constrainWidth: function () { return _this.handleDropdown(); },
                    dropdownButtonId: function () { return _this.handleDataActivates(); },
                    gutter: function () { return _this.handleDropdown(); },
                    hover: function () { return _this.handleDropdown(); },
                    id: function () { return _this.handleDropdown(); },
                    inDuration: function () { return _this.handleDropdown(); },
                    outDuration: function () { return _this.handleDropdown(); },
                    stopPropagation: function () { return _this.handleDropdown(); },
                };
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.handleDataActivates = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementAttribute(this.dropdownButtonElement[0], 'data-activates', this.id);
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.handleDropdown = /**
         * @return {?}
         */
            function () {
                this.validateProperties();
                var /** @type {?} */ options = {
                    alignment: this.align,
                    belowOrigin: this.belowOrigin,
                    constrainWidth: this.constrainWidth,
                    gutter: this.gutter,
                    hover: this.hover,
                    inDuration: this.inDuration,
                    outDuration: this.outDuration,
                    stopPropagation: this.stopPropagation,
                };
                // Initialize dropdown button for dropdown
                this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', [options]);
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                this.handleDataActivates();
                this.handleDropdown();
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () { return _this.renderer.invokeElementMethod(_this.dropdownButtonElement, 'dropdown', ['open']); });
            };
        /**
         * @return {?}
         */
        MzDropdownComponent.prototype.validateProperties = /**
         * @return {?}
         */
            function () {
                if (!this.id) {
                    throw new Error('Attribute [id] from mz-dropdown is required. ' + this.elementRef.nativeElement);
                }
                if (this.dropdownButtonElement.length === 0) {
                    throw new Error('Attribute [dropdownButtonId] from mz-dropdown is required and should be an existing element. ' +
                        this.elementRef.nativeElement);
                }
            };
        MzDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-dropdown',
                        template: "<ul\n  class=\"dropdown-content\"\n  [attr.id]=\"id\"\n>\n  <ng-content></ng-content>\n</ul>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzDropdownComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzDropdownComponent.propDecorators = {
            "align": [{ type: core.Input },],
            "belowOrigin": [{ type: core.Input },],
            "constrainWidth": [{ type: core.Input },],
            "dropdownButtonId": [{ type: core.Input },],
            "gutter": [{ type: core.Input },],
            "hover": [{ type: core.Input },],
            "id": [{ type: core.Input },],
            "inDuration": [{ type: core.Input },],
            "outDuration": [{ type: core.Input },],
            "stopPropagation": [{ type: core.Input },],
        };
        return MzDropdownComponent;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzDropdownModule = (function () {
        function MzDropdownModule() {
        }
        MzDropdownModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzDropdownComponent,
                            MzDropdownDividerComponent,
                            MzDropdownItemComponent,
                        ],
                        exports: [
                            MzDropdownComponent,
                            MzDropdownDividerComponent,
                            MzDropdownItemComponent,
                        ],
                    },] },
        ];
        return MzDropdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzFeatureDiscoveryComponent = (function () {
        function MzFeatureDiscoveryComponent(elementRef) {
            this.elementRef = elementRef;
            this.targetClass = true;
        }
        /**
         * @return {?}
         */
        MzFeatureDiscoveryComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.target = $(this.elementRef.nativeElement);
            };
        /**
         * @return {?}
         */
        MzFeatureDiscoveryComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.target.tapTarget('close');
            };
        /**
         * @return {?}
         */
        MzFeatureDiscoveryComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.target.tapTarget('open');
            };
        MzFeatureDiscoveryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-feature-discovery',
                        template: "<div class=\"tap-target-content\">\n  <ng-content></ng-content>\n</div>\n",
                        styles: [":host{display:block}"],
                    },] },
        ];
        /** @nocollapse */
        MzFeatureDiscoveryComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        MzFeatureDiscoveryComponent.propDecorators = {
            "targetClass": [{ type: core.HostBinding, args: ['class.tap-target',] },],
            "targetId": [{ type: core.HostBinding, args: ['attr.data-activates',] }, { type: core.Input },],
        };
        return MzFeatureDiscoveryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzFeatureDiscoveryModule = (function () {
        function MzFeatureDiscoveryModule() {
        }
        MzFeatureDiscoveryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            MzFeatureDiscoveryComponent,
                        ],
                        exports: [
                            MzFeatureDiscoveryComponent,
                        ],
                    },] },
        ];
        return MzFeatureDiscoveryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzIconDirective = (function (_super) {
        tslib_1.__extends(MzIconDirective, _super);
        function MzIconDirective(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzIconDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initMaterialize();
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzIconDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    align: function (previousValue) { return _this.handleAlign(previousValue); },
                    icon: function () { return _this.handleIcon(); },
                    size: function (previousValue) { return _this.handleSize(previousValue); },
                };
            };
        /**
         * @return {?}
         */
        MzIconDirective.prototype.initMaterialize = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'material-icons', true);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconDirective.prototype.handleAlign = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
                }
                if (this.align) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
                }
            };
        /**
         * @return {?}
         */
        MzIconDirective.prototype.handleIcon = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementProperty(this.elementRef.nativeElement, 'innerHTML', this.icon);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconDirective.prototype.handleSize = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
                }
                if (this.size) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, this.size, true);
                }
            };
        MzIconDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'i[mz-icon], i[mzIcon]',
                    },] },
        ];
        /** @nocollapse */
        MzIconDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzIconDirective.propDecorators = {
            "align": [{ type: core.Input },],
            "icon": [{ type: core.Input },],
            "size": [{ type: core.Input },],
        };
        return MzIconDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzIconModule = (function () {
        function MzIconModule() {
        }
        MzIconModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzIconDirective,
                        ],
                        exports: [
                            MzIconDirective,
                        ],
                    },] },
        ];
        return MzIconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzIconMdiDirective = (function (_super) {
        tslib_1.__extends(MzIconMdiDirective, _super);
        function MzIconMdiDirective(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzIconMdiDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initMaterialize();
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzIconMdiDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    align: function (previousValue) { return _this.handleAlign(previousValue); },
                    flip: function (previousValue) { return _this.handleFlip(previousValue); },
                    icon: function (previousValue) { return _this.handleIcon(previousValue); },
                    rotate: function (previousValue) { return _this.handleRotate(previousValue); },
                    size: function (previousValue) { return _this.handleSize(previousValue); },
                };
            };
        /**
         * @return {?}
         */
        MzIconMdiDirective.prototype.initMaterialize = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi', true);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconMdiDirective.prototype.handleAlign = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
                }
                if (this.align) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
                }
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconMdiDirective.prototype.handleFlip = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + previousValue, false);
                }
                this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + this.flip, !!this.flip);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconMdiDirective.prototype.handleIcon = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
                }
                this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.icon, true);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconMdiDirective.prototype.handleRotate = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + previousValue, false);
                }
                this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + this.rotate, !!this.rotate);
            };
        /**
         * @param {?=} previousValue
         * @return {?}
         */
        MzIconMdiDirective.prototype.handleSize = /**
         * @param {?=} previousValue
         * @return {?}
         */
            function (previousValue) {
                if (!this.size) {
                    this.size = '24px';
                }
                if (previousValue) {
                    this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
                }
                this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.size, true);
            };
        MzIconMdiDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'a[mz-icon-mdi], a[mzIconMdi], i[mz-icon-mdi], i[mzIconMdi]',
                    },] },
        ];
        /** @nocollapse */
        MzIconMdiDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzIconMdiDirective.propDecorators = {
            "align": [{ type: core.Input },],
            "flip": [{ type: core.Input },],
            "icon": [{ type: core.Input },],
            "rotate": [{ type: core.Input },],
            "size": [{ type: core.Input },],
        };
        return MzIconMdiDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzIconMdiModule = (function () {
        function MzIconMdiModule() {
        }
        MzIconMdiModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzIconMdiDirective,
                        ],
                        exports: [
                            MzIconMdiDirective,
                        ],
                    },] },
        ];
        return MzIconMdiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInputContainerComponent = (function () {
        function MzInputContainerComponent() {
        }
        MzInputContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-input-container',
                        template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzInputContainerComponent.propDecorators = {
            "inline": [{ type: core.Input },],
        };
        return MzInputContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInputPrefixDirective = (function () {
        function MzInputPrefixDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzInputPrefixDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
            };
        MzInputPrefixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'i[mzInputPrefix], i[mz-input-prefix]',
                    },] },
        ];
        /** @nocollapse */
        MzInputPrefixDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        return MzInputPrefixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInputDirective = (function (_super) {
        tslib_1.__extends(MzInputDirective, _super);
        function MzInputDirective(ngControl, elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzInputDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.initInputSubscription();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.inputValueSubscription) {
                    this.inputValueSubscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    autocomplete: function () { return _this.handleAutocomplete(); },
                    dataError: function () { return _this.handleDataError(); },
                    dataSuccess: function () { return _this.handleDataSuccess(); },
                    label: function () { return _this.handleLabel(); },
                    length: function () { return _this.handleLength(); },
                    placeholder: function () { return _this.handlePlaceholder(); },
                    validate: function () { return _this.handleValidate(); },
                };
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.inputElement = $(this.elementRef.nativeElement);
                this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
                this.labelElement = this.createLabelElement();
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.initInputSubscription = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.ngControl) {
                    this.inputValueSubscription = this.ngControl.valueChanges.subscribe(function () { return _this.setLabelActive(); });
                }
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.inputContainerElement.length === 0) {
                    console.error('Input with mz-input directive must be placed inside an [mz-input-container] tag', this.inputElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleAutocomplete = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ isAutocomplete = this.autocomplete != null
                    && this.autocomplete.data != null
                    && Object.keys(this.autocomplete.data).length > 0;
                this.renderer.setElementClass(this.inputElement[0], 'autocomplete', isAutocomplete);
                if (this.autocomplete != null) {
                    // wait until autocomplete is defined before to invoke
                    // see issue: https://github.com/Dogfalo/materialize/issues/4401
                    rxjs.interval(100)
                        .pipe(operators.skipWhile(function () { return !_this.inputElement['autocomplete']; }), operators.first())
                        .subscribe(function () { return _this.renderer.invokeElementMethod(_this.inputElement, 'autocomplete', [_this.autocomplete]); });
                }
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleDataError = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementAttribute(this.labelElement[0], 'data-error', this.dataError);
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleDataSuccess = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementAttribute(this.labelElement[0], 'data-success', this.dataSuccess);
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleLength = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ length = this.length ? this.length.toString() : null;
                this.renderer.setElementAttribute(this.inputElement[0], 'data-length', length);
                if (length) {
                    this.setCharacterCount();
                }
                else {
                    this.removeCharacterCount();
                }
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handlePlaceholder = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
                this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
                // fix issue in IE where having a placeholder on input make control dirty
                // note that it still trigger validation on focus but this is better than nothing
                // issue : https://github.com/angular/angular/issues/15299
                // workaround : https://stackoverflow.com/a/44967245/5583283
                if (this.ngControl) {
                    setTimeout(function () { return _this.ngControl.control.markAsPristine(); });
                }
                this.setLabelActive();
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.handleValidate = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.inputElement[0], 'validate', this.validate);
                if (this.validate) {
                    // force validation
                    this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
                }
                else {
                    this.removeValidationClasses();
                }
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.setCharacterCount = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.renderer.invokeElementMethod(this.inputElement, 'characterCounter');
                // force validation
                // need setTimeout otherwise it wont trigger validation right away
                setTimeout(function () {
                    _this.renderer.invokeElementMethod(_this.inputElement, 'trigger', ['input']);
                    _this.renderer.invokeElementMethod(_this.inputElement, 'trigger', ['blur']);
                });
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.setLabelActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // need setTimeout otherwise it wont make label float in some circonstances
                // for example: forcing validation for example, reseting form programmaticaly, ...
                setTimeout(function () {
                    var /** @type {?} */ inputValue = ((_this.inputElement[0])).value;
                    var /** @type {?} */ isActive = !!_this.placeholder || !!inputValue;
                    _this.renderer.setElementClass(_this.labelElement[0], 'active', isActive);
                });
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.removeCharacterCount = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.inputElement.siblings('.character-counter'), 'remove');
                this.removeValidationClasses();
            };
        /**
         * @return {?}
         */
        MzInputDirective.prototype.removeValidationClasses = /**
         * @return {?}
         */
            function () {
                // reset valid/invalid state
                this.renderer.setElementClass(this.inputElement[0], 'invalid', false);
                this.renderer.setElementClass(this.inputElement[0], 'valid', false);
            };
        MzInputDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mzInput], input[mz-input]',
                    },] },
        ];
        /** @nocollapse */
        MzInputDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: core.Optional },] },
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzInputDirective.propDecorators = {
            "id": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "autocomplete": [{ type: core.Input },],
            "dataError": [{ type: core.Input },],
            "dataSuccess": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "length": [{ type: core.Input },],
            "validate": [{ type: core.Input },],
        };
        return MzInputDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzInputModule = (function () {
        function MzInputModule() {
        }
        MzInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzInputContainerComponent,
                            MzInputDirective,
                            MzInputPrefixDirective,
                        ],
                        exports: [
                            MzInputContainerComponent,
                            MzInputDirective,
                            MzInputPrefixDirective,
                        ],
                    },] },
        ];
        return MzInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzMediaService = (function () {
        function MzMediaService() {
            this.mediaBreakpoints = [
                { alias: 's', minWidth: 0, maxWidth: 600 },
                { alias: 'm', minWidth: 601, maxWidth: 992 },
                { alias: 'l', minWidth: 993, maxWidth: 1200 },
                { alias: 'xl', minWidth: 1201, maxWidth: Number.MAX_VALUE },
            ];
            this.matchOperators = [
                {
                    operator: 'gt',
                    match: function (breakpoint) { return window.innerWidth > breakpoint.maxWidth; },
                },
                {
                    operator: 'lt',
                    match: function (breakpoint) { return window.innerWidth < breakpoint.minWidth; },
                },
                {
                    operator: null,
                    match: function (breakpoint) { return window.innerWidth >= breakpoint.minWidth && window.innerWidth <= breakpoint.maxWidth; },
                },
            ];
            this.media = this.registerWindowResizeListener();
        }
        /**
         * @param {?} breakpoint
         * @return {?}
         */
        MzMediaService.prototype.isActive = /**
         * @param {?} breakpoint
         * @return {?}
         */
            function (breakpoint) {
                var _this = this;
                return new rxjs.Observable(function (subscriber) {
                    _this.media.subscribe(function (media) {
                        try {
                            subscriber.next(_this.isActiveBreakpoint(breakpoint));
                        }
                        catch (error) {
                            subscriber.error(error);
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        MzMediaService.prototype.registerWindowResizeListener = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.fromEvent(window, 'resize')
                    .pipe(operators.map(function () { return _this.getWindowMedia(); }), operators.startWith(this.getWindowMedia()), operators.publishReplay(1), operators.refCount());
            };
        /**
         * @return {?}
         */
        MzMediaService.prototype.getWindowMedia = /**
         * @return {?}
         */
            function () {
                return {
                    alias: this.mediaBreakpoints.find(function (breakpoint) { return window.innerWidth <= breakpoint.maxWidth; }).alias,
                    windowHeight: window.innerHeight,
                    windowWidth: window.innerWidth,
                };
            };
        /**
         * @param {?} breakpoint
         * @return {?}
         */
        MzMediaService.prototype.isActiveBreakpoint = /**
         * @param {?} breakpoint
         * @return {?}
         */
            function (breakpoint) {
                var /** @type {?} */ matchOperator;
                var /** @type {?} */ mediaBreakpoint;
                if (breakpoint) {
                    var /** @type {?} */ fragments_1 = breakpoint.split('-');
                    if (fragments_1.length === 1) {
                        matchOperator = this.matchOperators.find(function (x) { return x.operator === null; });
                        mediaBreakpoint = this.mediaBreakpoints.find(function (x) { return x.alias === fragments_1[0]; });
                    }
                    else if (fragments_1.length === 2) {
                        matchOperator = this.matchOperators.find(function (x) { return x.operator === fragments_1[0]; });
                        mediaBreakpoint = this.mediaBreakpoints.find(function (x) { return x.alias === fragments_1[1]; });
                    }
                }
                if (!mediaBreakpoint || !matchOperator) {
                    throw Error("MzMediaService.isActive parameter is invalid: '" + breakpoint + "' is not a recognized breakpoint.");
                }
                return matchOperator.match(mediaBreakpoint);
            };
        MzMediaService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        MzMediaService.ctorParameters = function () { return []; };
        return MzMediaService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzMediaModule = (function () {
        function MzMediaModule() {
        }
        MzMediaModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [MzMediaService],
                    },] },
        ];
        return MzMediaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzModalComponent = (function (_super) {
        tslib_1.__extends(MzModalComponent, _super);
        function MzModalComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.close = new core.EventEmitter();
            return _this;
        }
        /**
         * @return {?}
         */
        MzModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initModal();
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.modalElement = $(this.modalElementRef.nativeElement);
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    options: function () { return _this.handleOptions(); },
                };
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.initModal = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.modalElement, 'modal', [this.options]);
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.handleOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // extend complete function to emit close event on callback return
                var /** @type {?} */ originalCompleteFn = this.options && this.options.complete || (function () { });
                this.options = Object.assign({}, this.options, {
                    complete: function () {
                        originalCompleteFn();
                        _this.close.emit();
                    },
                });
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.openModal = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.modalElement, 'modal', ['open']);
            };
        /**
         * @return {?}
         */
        MzModalComponent.prototype.closeModal = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.modalElement, 'modal', ['close']);
            };
        MzModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-modal',
                        template: "<div #modal\n  class=\"modal\"\n  [class.modal-fixed-footer]=\"fixedFooter\"\n  [class.bottom-sheet]=\"bottomSheet\"\n  [class.modal-fullscreen]=\"fullscreen\"\n>\n  <div class=\"modal-content\">\n    <ng-content select=\"mz-modal-header\"></ng-content>\n    <div>\n      <ng-content select=\"mz-modal-content\"></ng-content>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <ng-content select=\"mz-modal-footer\"></ng-content>\n  </div>\n</div>\n",
                        styles: [".modal:not(.bottom-sheet).modal-fullscreen{top:12px!important;margin:0 auto;width:calc(100% - 24px);height:calc(100% - 24px);max-height:none}.modal.bottom-sheet.modal-fullscreen{height:100%;max-height:none}/deep/ mz-modal-header h5,/deep/ mz-modal-header h6{margin-top:0}"],
                    },] },
        ];
        /** @nocollapse */
        MzModalComponent.ctorParameters = function () {
            return [
                { type: core.Renderer, },
            ];
        };
        MzModalComponent.propDecorators = {
            "bottomSheet": [{ type: core.Input },],
            "fixedFooter": [{ type: core.Input },],
            "fullscreen": [{ type: core.Input },],
            "options": [{ type: core.Input },],
            "close": [{ type: core.Output },],
            "modalElementRef": [{ type: core.ViewChild, args: ['modal',] },],
        };
        return MzModalComponent;
    }(HandlePropChanges));
    var MzModalHeaderDirective = (function () {
        function MzModalHeaderDirective() {
        }
        MzModalHeaderDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-modal-header' },] },
        ];
        return MzModalHeaderDirective;
    }());
    var MzModalContentDirective = (function () {
        function MzModalContentDirective() {
        }
        MzModalContentDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-modal-content' },] },
        ];
        return MzModalContentDirective;
    }());
    var MzModalFooterDirective = (function () {
        function MzModalFooterDirective() {
        }
        MzModalFooterDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-modal-footer' },] },
        ];
        return MzModalFooterDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzModalCloseDirective = (function () {
        function MzModalCloseDirective(modalComponent) {
            this.modalComponent = modalComponent;
        }
        /**
         * @return {?}
         */
        MzModalCloseDirective.prototype.onclick = /**
         * @return {?}
         */
            function () {
                this.modalComponent.closeModal();
            };
        MzModalCloseDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'a[mzModalClose], button[mzModalClose], a[mz-modal-close], button[mz-modal-close]',
                    },] },
        ];
        /** @nocollapse */
        MzModalCloseDirective.ctorParameters = function () {
            return [
                { type: MzModalComponent, },
            ];
        };
        MzModalCloseDirective.propDecorators = {
            "onclick": [{ type: core.HostListener, args: ['click',] },],
        };
        return MzModalCloseDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzModalService = (function () {
        function MzModalService(injectionService) {
            this.injectionService = injectionService;
        }
        /**
         * Open modal component.
         */
        /**
         * Open modal component.
         * @param {?} componentClass
         * @param {?=} options
         * @return {?}
         */
        MzModalService.prototype.open = /**
         * Open modal component.
         * @param {?} componentClass
         * @param {?=} options
         * @return {?}
         */
            function (componentClass, options) {
                if (options === void 0) {
                    options = {};
                }
                var /** @type {?} */ componentRef = this.injectionService.appendComponent(componentClass, options);
                componentRef.instance.modalComponent.close
                    .pipe(operators.first())
                    .subscribe(function () {
                    componentRef.destroy();
                });
                return componentRef;
            };
        MzModalService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        MzModalService.ctorParameters = function () {
            return [
                { type: MzInjectionService, },
            ];
        };
        return MzModalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzModalModule = (function () {
        function MzModalModule() {
        }
        MzModalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [MzInjectionModule],
                        declarations: [
                            MzModalCloseDirective,
                            MzModalComponent,
                            MzModalContentDirective,
                            MzModalFooterDirective,
                            MzModalHeaderDirective,
                        ],
                        exports: [
                            MzModalCloseDirective,
                            MzModalComponent,
                            MzModalContentDirective,
                            MzModalFooterDirective,
                            MzModalHeaderDirective,
                        ],
                        providers: [MzModalService],
                    },] },
        ];
        return MzModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzNavbarItemContainerComponent = (function () {
        function MzNavbarItemContainerComponent() {
        }
        MzNavbarItemContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-navbar-item-container',
                        template: "<ul id=\"nav-mobile\" class=\"{{ align }}\">\n  <ng-content></ng-content>\n</ul>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzNavbarItemContainerComponent.propDecorators = {
            "align": [{ type: core.Input },],
        };
        return MzNavbarItemContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzNavbarItemComponent = (function () {
        function MzNavbarItemComponent() {
        }
        MzNavbarItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-navbar-item',
                        template: "<li \n  class=\"{{ itemClass }}\"\n  [class.active]=\"active\"\n>\n  <ng-content></ng-content>\n</li>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzNavbarItemComponent.propDecorators = {
            "active": [{ type: core.Input },],
            "itemClass": [{ type: core.Input },],
        };
        return MzNavbarItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzNavbarComponent = (function () {
        function MzNavbarComponent() {
        }
        MzNavbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-navbar',
                        template: "<nav>\n  <div class=\"nav-wrapper {{ navbarClass }}\">\n    <ng-content></ng-content>\n  </div>\n</nav>",
                        styles: [".nav-wrapper /deep/ .btn i{line-height:inherit}"],
                    },] },
        ];
        /** @nocollapse */
        MzNavbarComponent.propDecorators = {
            "navbarClass": [{ type: core.Input },],
        };
        return MzNavbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzNavbarModule = (function () {
        function MzNavbarModule() {
        }
        MzNavbarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzNavbarComponent,
                            MzNavbarItemComponent,
                            MzNavbarItemContainerComponent,
                        ],
                        exports: [
                            MzNavbarComponent,
                            MzNavbarItemComponent,
                            MzNavbarItemContainerComponent,
                        ],
                    },] },
        ];
        return MzNavbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzPaginationPageButtonComponent = (function () {
        function MzPaginationPageButtonComponent() {
        }
        MzPaginationPageButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-pagination-page-button',
                        template: "<li [class.active]=\"active\"\n  [class.disabled]=\"disabled\"\n  [class.waves-effect]=\"!active && !disabled\">\n  <ng-content></ng-content>\n</li>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzPaginationPageButtonComponent.propDecorators = {
            "active": [{ type: core.Input },],
            "disabled": [{ type: core.Input },],
        };
        return MzPaginationPageButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzPaginationComponent = (function (_super) {
        tslib_1.__extends(MzPaginationComponent, _super);
        function MzPaginationComponent() {
            var _this = _super.call(this) || this;
            _this.currentPage = 1;
            _this.enableFirstAndLastPageButtons = false;
            _this.maxPageButtons = 5;
            _this.pageChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(MzPaginationComponent.prototype, "totalPages", {
            get: /**
             * @return {?}
             */ function () {
                return Math.ceil(this.totalItems / this.itemsPerPage);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.renderButtons();
            };
        /**
         * @param {?} pageNumber
         * @return {?}
         */
        MzPaginationComponent.prototype.changeCurrentPage = /**
         * @param {?} pageNumber
         * @return {?}
         */
            function (pageNumber) {
                this.currentPage = pageNumber;
                this.pageChange.emit(pageNumber);
                this.renderButtons();
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.firstPage = /**
         * @return {?}
         */
            function () {
                this.changeCurrentPage(1);
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    currentPage: function () { return _this.renderButtons(); },
                    itemsPerPage: function () { return _this.renderButtons(); },
                    maxPageButtons: function () { return _this.renderButtons(); },
                    totalItems: function () { return _this.renderButtons(); },
                };
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.lastPage = /**
         * @return {?}
         */
            function () {
                this.changeCurrentPage(this.totalPages);
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.nextPage = /**
         * @return {?}
         */
            function () {
                if (this.currentPage < this.totalPages) {
                    var /** @type {?} */ nextPage = this.currentPage + 1;
                    this.changeCurrentPage(nextPage);
                }
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.previousPage = /**
         * @return {?}
         */
            function () {
                if (this.currentPage !== 1) {
                    var /** @type {?} */ previousPage = this.currentPage - 1;
                    this.changeCurrentPage(previousPage);
                }
            };
        /**
         * @return {?}
         */
        MzPaginationComponent.prototype.renderButtons = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ buttonsCount = Math.min(this.maxPageButtons, this.totalPages);
                var /** @type {?} */ maxPosition = this.totalPages - buttonsCount;
                var /** @type {?} */ halfButtons = Math.floor(buttonsCount / 2);
                var /** @type {?} */ hiddenPagesBefore = (this.currentPage - halfButtons);
                if (hiddenPagesBefore > maxPosition) {
                    hiddenPagesBefore = maxPosition + 1;
                }
                var /** @type {?} */ from = Math.max(hiddenPagesBefore, 1);
                var /** @type {?} */ to = Math.min(this.totalPages, from + this.maxPageButtons - 1);
                this.pages = Array(buttonsCount).fill(0).map(function (x, i) { return from + i; });
                if (this.currentPage > this.totalPages) {
                    this.currentPage = this.pages[0];
                }
            };
        MzPaginationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-pagination',
                        template: "\n  <ul class=\"pagination\">\n    <mz-pagination-page-button [disabled]=\"currentPage === 1\" *ngIf=\"enableFirstAndLastPageButtons\">\n      <a (click)=\"firstPage()\"><i mz-icon [icon]=\"'first_page'\"></i></a>\n    </mz-pagination-page-button>\n    <mz-pagination-page-button [disabled]=\"currentPage === 1\">\n      <a (click)=\"previousPage()\"><i mz-icon [icon]=\"'chevron_left'\"></i></a>\n    </mz-pagination-page-button>\n    <mz-pagination-page-button *ngFor=\"let page of pages\"\n      [active]=\"page === currentPage\"\n    >\n      <a (click)=\"changeCurrentPage(page)\">{{ page }}</a>\n    </mz-pagination-page-button>\n    <mz-pagination-page-button [disabled]=\"currentPage === totalPages\">\n      <a (click)=\"nextPage()\"><i mz-icon [icon]=\"'chevron_right'\"></i></a>\n    </mz-pagination-page-button>\n    <mz-pagination-page-button [disabled]=\"currentPage === totalPages\" *ngIf=\"enableFirstAndLastPageButtons\">\n      <a (click)=\"lastPage()\"><i mz-icon [icon]=\"'last_page'\"></i></a>\n    </mz-pagination-page-button>\n  </ul>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzPaginationComponent.ctorParameters = function () { return []; };
        MzPaginationComponent.propDecorators = {
            "currentPage": [{ type: core.Input },],
            "enableFirstAndLastPageButtons": [{ type: core.Input },],
            "itemsPerPage": [{ type: core.Input },],
            "maxPageButtons": [{ type: core.Input },],
            "totalItems": [{ type: core.Input },],
            "pageChange": [{ type: core.Output },],
        };
        return MzPaginationComponent;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzPaginationModule = (function () {
        function MzPaginationModule() {
        }
        MzPaginationModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            MzIconModule,
                        ],
                        declarations: [
                            MzPaginationComponent,
                            MzPaginationPageButtonComponent,
                        ],
                        exports: [
                            MzPaginationComponent,
                        ],
                    },] },
        ];
        return MzPaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzParallaxComponent = (function () {
        function MzParallaxComponent(renderer) {
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzParallaxComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementStyle(this.parallaxContainer.nativeElement, 'height', isNaN(this.height) ? '500px' : this.height + 'px');
                this.renderer.invokeElementMethod($(this.parallax.nativeElement), 'parallax');
            };
        MzParallaxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-parallax',
                        template: "<div #parallaxContainer class=\"parallax-container\">\n  <div #parallax class=\"parallax\">\n    <ng-content></ng-content>\n  </div>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzParallaxComponent.ctorParameters = function () {
            return [
                { type: core.Renderer, },
            ];
        };
        MzParallaxComponent.propDecorators = {
            "height": [{ type: core.Input },],
            "parallax": [{ type: core.ViewChild, args: ['parallax',] },],
            "parallaxContainer": [{ type: core.ViewChild, args: ['parallaxContainer',] },],
        };
        return MzParallaxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzParallaxModule = (function () {
        function MzParallaxModule() {
        }
        MzParallaxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzParallaxComponent],
                        exports: [MzParallaxComponent],
                    },] },
        ];
        return MzParallaxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzProgressComponent = (function () {
        function MzProgressComponent() {
        }
        MzProgressComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-progress',
                        template: "<div class=\"progress {{ backgroundClass }}\">\n\n  <div\n    class=\"progress-bar {{ progressClass }}\"\n    [class.determinate]=\"percentage != null\"\n    [class.indeterminate]=\"percentage == null\"\n    [style.width.%]=\"percentage\">\n  </div>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzProgressComponent.propDecorators = {
            "backgroundClass": [{ type: core.Input },],
            "percentage": [{ type: core.Input },],
            "progressClass": [{ type: core.Input },],
        };
        return MzProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzProgressModule = (function () {
        function MzProgressModule() {
        }
        MzProgressModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzProgressComponent],
                        exports: [MzProgressComponent],
                    },] },
        ];
        return MzProgressModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzRadioButtonContainerComponent = (function () {
        function MzRadioButtonContainerComponent() {
        }
        MzRadioButtonContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-radio-button-container',
                        template: "<p class=\"radio-button-field\">\n  <ng-content></ng-content>\n</p>",
                        styles: [""],
                    },] },
        ];
        return MzRadioButtonContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzRadioButtonDirective = (function (_super) {
        tslib_1.__extends(MzRadioButtonDirective, _super);
        function MzRadioButtonDirective(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    label: function () { return _this.handleLabel(); },
                    withGap: function () { return _this.handleWithGap(); },
                };
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.inputElement = $(this.elementRef.nativeElement);
                this.inputContainerElement = $(this.elementRef.nativeElement).parent('.radio-button-field');
                this.labelElement = this.createLabelElement();
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.inputContainerElement.length === 0) {
                    console.error('Radio Button must be placed inside a [mz-radio-button-container] tag', this.inputElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzRadioButtonDirective.prototype.handleWithGap = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.inputElement[0], 'with-gap', this.withGap);
            };
        MzRadioButtonDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mzRadioButton], input[mz-radio-button]',
                    },] },
        ];
        /** @nocollapse */
        MzRadioButtonDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzRadioButtonDirective.propDecorators = {
            "id": [{ type: core.HostBinding }, { type: core.Input },],
            "label": [{ type: core.Input },],
            "withGap": [{ type: core.Input },],
        };
        return MzRadioButtonDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzRadioButtonModule = (function () {
        function MzRadioButtonModule() {
        }
        MzRadioButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzRadioButtonDirective,
                            MzRadioButtonContainerComponent,
                        ],
                        exports: [
                            MzRadioButtonDirective,
                            MzRadioButtonContainerComponent,
                        ],
                    },] },
        ];
        return MzRadioButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzErrorMessageComponent = (function () {
        function MzErrorMessageComponent() {
            this.errorMessage = '';
        }
        /**
         * @return {?}
         */
        MzErrorMessageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.buildErrorMessage();
                this.controlStatusChangesSubscription = this.control.statusChanges.subscribe(function () { return _this.buildErrorMessage(); });
            };
        /**
         * @return {?}
         */
        MzErrorMessageComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.controlStatusChangesSubscription.unsubscribe();
            };
        /**
         * @return {?}
         */
        MzErrorMessageComponent.prototype.buildErrorMessage = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.errorMessage = '';
                if (this.control.errors && this.errorMessageResource) {
                    Object.keys(this.control.errors).forEach(function (key) {
                        _this.errorMessage += _this.errorMessageResource[key] + ' ';
                    });
                }
            };
        MzErrorMessageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-error-message',
                        template: "<div [@enterAnimation]=\"errorMessage\" class=\"invalid\" *ngIf=\"(control.touched || control.dirty) && control.invalid && errorMessage\">{{ errorMessage }}</div>",
                        styles: ["div.invalid{color:#e30613;font-size:.8rem;opacity:1;overflow-wrap:break-word}input:not([type=checkbox])+label+:host div.invalid,mz-select-container :host div.invalid,textarea+label+:host div.invalid{margin-top:-19px;min-height:19px}"],
                        animations: [
                            animations.trigger('enterAnimation', [
                                animations.transition(':enter', [
                                    animations.style({ transform: 'translateY(-5px)', opacity: 0 }),
                                    animations.animate('300ms', animations.style({ transform: 'translateY(0)', opacity: 1 })),
                                ]),
                                animations.transition(':leave', [
                                    animations.style({ transform: 'translateY(0)', opacity: 1 }),
                                    animations.animate('300ms', animations.style({ transform: 'translateY(-5px)', opacity: 0 })),
                                ]),
                            ]),
                        ],
                    },] },
        ];
        /** @nocollapse */
        MzErrorMessageComponent.propDecorators = {
            "control": [{ type: core.Input },],
            "errorMessageResource": [{ type: core.Input },],
        };
        return MzErrorMessageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ErrorMessageResource = (function () {
        function ErrorMessageResource() {
        }
        return ErrorMessageResource;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzValidationComponent = (function () {
        function MzValidationComponent(elementRef, resolver, viewContainerRef, ngControl, renderer) {
            this.elementRef = elementRef;
            this.resolver = resolver;
            this.viewContainerRef = viewContainerRef;
            this.ngControl = ngControl;
            this.renderer = renderer;
            this.errorMessageComponent = null;
            this._formControlDisabled = false;
            this._required = false;
        }
        Object.defineProperty(MzValidationComponent.prototype, "required", {
            get: /**
             * @return {?}
             */ function () { return this._required; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._required = (value != null && "" + value !== 'false'); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzValidationComponent.prototype, "formControlDisabled", {
            get: /**
             * @return {?}
             */ function () { return this._formControlDisabled; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._formControlDisabled = value;
                if (this._formControlDisabled) {
                    this.ngControl.control.disable();
                }
                else {
                    this.ngControl.control.enable();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzValidationComponent.prototype, "elementToAddValidation", {
            get: /**
             * @return {?}
             */ function () {
                return this.isNativeSelectElement
                    ? this.inputSelectDropdown
                    : this.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzValidationComponent.prototype, "inputSelectDropdown", {
            get: /**
             * @return {?}
             */ function () {
                return this.nativeElement.siblings('input.select-dropdown');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MzValidationComponent.prototype, "isNativeSelectElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.nativeElement[0].nodeName === 'SELECT';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} target
         * @return {?}
         */
        MzValidationComponent.prototype.onFocusOut = /**
         * @param {?} target
         * @return {?}
         */
            function (target) {
                this.ngControl.control.markAsTouched();
                this.setValidationState();
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initElements();
                this.initErrorMessageComponent();
                this.subscribeStatusChanges();
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.statusChangesSubscription.unsubscribe();
                this.errorMessageComponent.destroy();
            };
        /**
         * @param {?} element
         * @return {?}
         */
        MzValidationComponent.prototype.clearValidationState = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                this.renderer.setElementClass(element[0], 'valid', false);
                this.renderer.setElementClass(element[0], 'invalid', false);
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.createRequiredSpanElement = /**
         * @return {?}
         */
            function () {
                if (this.required && this.labelElement) {
                    var /** @type {?} */ spanElement = document.createElement('span');
                    spanElement.setAttribute('class', 'placeholder-required');
                    spanElement.textContent = ' *';
                    this.renderer.invokeElementMethod(this.labelElement, 'appendChild', [spanElement]);
                }
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.labelElement = $('label[for="' + this.id + '"]')[0];
                this.nativeElement = $(this.elementRef.nativeElement);
                this.createRequiredSpanElement();
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.initErrorMessageComponent = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ errorMessageFactory = this.resolver.resolveComponentFactory(MzErrorMessageComponent);
                this.errorMessageComponent = this.viewContainerRef.createComponent(errorMessageFactory);
                this.errorMessageComponent.instance.errorMessageResource = this.errorMessageResource;
                this.errorMessageComponent.instance.control = this.ngControl.control;
                this.errorMessageComponent.changeDetectorRef.detectChanges();
                var /** @type {?} */ errorMessage = this.nativeElement.parent().children('mz-error-message');
                this.renderer.invokeElementMethod(errorMessage, 'insertAfter', [this.labelElement]);
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.setValidationState = /**
         * @return {?}
         */
            function () {
                // to handle reset form
                if (this.ngControl.control.untouched && this.ngControl.control.pristine) {
                    this.clearValidationState(this.elementToAddValidation);
                    return;
                }
                // to handle field validity
                if (this.ngControl.control.enabled) {
                    if (this.ngControl.control.valid) {
                        this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', true);
                        this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', false);
                    }
                    else {
                        this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', false);
                        this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', true);
                    }
                }
                else {
                    this.clearValidationState(this.elementToAddValidation);
                }
            };
        /**
         * @return {?}
         */
        MzValidationComponent.prototype.subscribeStatusChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe(function (status) {
                    // TODO Find a better way to handle validation after the form subscription. (see demo form-validation)
                    // wait for the valueChanges method from FormGroup to have been triggered before handling the validation state
                    // /!\ race condition warning /!\
                    setTimeout(function () { return _this.setValidationState(); });
                });
            };
        MzValidationComponent.decorators = [
            { type: core.Component, args: [{
                        encapsulation: core.ViewEncapsulation.None,
                        selector: 'mz-validation, [mz-validation], [mzValidation]',
                        template: "<ng-content></ng-content>",
                        styles: [".select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}"],
                    },] },
        ];
        /** @nocollapse */
        MzValidationComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.ComponentFactoryResolver, },
                { type: core.ViewContainerRef, },
                { type: forms.NgControl, },
                { type: core.Renderer, },
            ];
        };
        MzValidationComponent.propDecorators = {
            "id": [{ type: core.Input },],
            "errorMessageResource": [{ type: core.Input },],
            "required": [{ type: core.HostBinding, args: ['attr.required',] }, { type: core.Input },],
            "formControlDisabled": [{ type: core.Input },],
            "onFocusOut": [{ type: core.HostListener, args: ['focusout', ['$event.target'],] },],
        };
        return MzValidationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSelectDirective = (function (_super) {
        tslib_1.__extends(MzSelectDirective, _super);
        function MzSelectDirective(elementRef, changeDetectorRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.changeDetectorRef = changeDetectorRef;
            _this.renderer = renderer;
            _this.update = new core.EventEmitter();
            _this.suspend = false;
            return _this;
        }
        Object.defineProperty(MzSelectDirective.prototype, "inputElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectElement.siblings('input.select-dropdown');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.initOnChange();
                this.handleProperties();
                // must be done after handlePlaceholder
                this.initSelectedOption();
                // must be done after handleProperties
                this.initMaterialSelect();
                // must be done after initMaterialSelect
                this.listenOptionChanges();
                this.initFilledIn();
                this.handleDOMEvents();
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.selectElement, 'material_select', ['destroy']);
                this.selectElement.off();
                this.mutationObserver.disconnect();
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    disabled: function () { return _this.handleDisabled(); },
                    label: function () { return _this.handleLabel(); },
                    placeholder: function () { return _this.handlePlaceholder(); },
                };
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.selectElement = $(this.elementRef.nativeElement);
                this.selectContainerElement = $(this.elementRef.nativeElement).parents('.input-field');
                this.labelElement = this.createLabelElement();
            };
        /**
         * Need to be done after material_select has been invoked or else the multi-select
         * options are not yet in the DOM as it loops on rendered options
         */
        /**
         * Need to be done after material_select has been invoked or else the multi-select
         * options are not yet in the DOM as it loops on rendered options
         * @return {?}
         */
        MzSelectDirective.prototype.initFilledIn = /**
         * Need to be done after material_select has been invoked or else the multi-select
         * options are not yet in the DOM as it loops on rendered options
         * @return {?}
         */
            function () {
                var _this = this;
                this.checkboxElements = this.selectContainerElement.find(':checkbox');
                this.handlers['filledIn'] = function () { return _this.handleFilledIn(); };
                this.handleFilledIn();
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.initMaterialSelect = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.selectElement, 'material_select');
            };
        /**
         * Trigger the native change event from select element instead of the JQuery.
         * An issue on Github is open about this problem : https://github.com/Dogfalo/materialize/issues/2843
         * This method should be removed when this issue is revolved.
         */
        /**
         * Trigger the native change event from select element instead of the JQuery.
         * An issue on Github is open about this problem : https://github.com/Dogfalo/materialize/issues/2843
         * This method should be removed when this issue is revolved.
         * @return {?}
         */
        MzSelectDirective.prototype.initOnChange = /**
         * Trigger the native change event from select element instead of the JQuery.
         * An issue on Github is open about this problem : https://github.com/Dogfalo/materialize/issues/2843
         * This method should be removed when this issue is revolved.
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectElement.on('change', function (event) {
                    if (!_this.suspend) {
                        _this.suspend = true;
                        var /** @type {?} */ customEvent = document.createEvent('CustomEvent');
                        customEvent.initCustomEvent('change', true, false, event.target.value);
                        _this.renderer.invokeElementMethod(_this.selectElement[0], 'dispatchEvent', [customEvent]);
                    }
                });
                // Stop the propagation of change event
                this.selectElement[0].addEventListener('change', function () {
                    _this.suspend = false;
                });
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handleDOMEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.inputElement.on('blur focus', function (event) {
                    var /** @type {?} */ customEvent = document.createEvent('CustomEvent');
                    customEvent.initCustomEvent(event.type, true, false, event.target);
                    _this.selectElement[0].dispatchEvent(customEvent);
                });
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.selectElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.selectContainerElement.length === 0) {
                    console.error('Select with mz-select directive must be place inside a [mz-select-container] tag', this.selectElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.initSelectedOption = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ firstOptionElement = this.selectElement.children().first();
                if (firstOptionElement.length > 0
                    && this.selectElement.children('option[selected]').length === 0
                    && !this.selectElement[0].hasAttribute('multiple')) {
                    this.renderer.setElementAttribute(firstOptionElement[0], 'selected', '');
                }
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handleDisabled = /**
         * @return {?}
         */
            function () {
                // when disabled is null/undefined that means the property has not been used on the element
                // but it might be set by another process (for example reactive form applies disabled attribute itself)
                // therefore we don't want to remove or add it here
                if (this.disabled != null) {
                    this.renderer.setElementProperty(this.selectElement[0], 'disabled', !!this.disabled);
                    this.updateMaterialSelect();
                }
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                if (this.label != null) {
                    this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
                }
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handleFilledIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.checkboxElements.length > 0) {
                    this.checkboxElements.toArray().forEach(function (checkboxElement) {
                        _this.renderer.setElementClass(checkboxElement, 'filled-in', !!_this.filledIn);
                    });
                }
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.handlePlaceholder = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ placeholderElement = this.selectElement.children(':disabled').first();
                // if placeholder element exists
                if (placeholderElement.length > 0) {
                    if (this.placeholder) {
                        // update existing placeholder element
                        this.renderer.invokeElementMethod(placeholderElement, 'text', [this.placeholder]);
                    }
                    else {
                        // remove existing placeholder element
                        this.renderer.invokeElementMethod(placeholderElement, 'remove');
                        // Force trigger change event since it's not triggered when value change programmatically
                        this.renderer.invokeElementMethod(this.selectElement, 'change');
                        // Required if we don't want exception "Expression has changed after it was checked." https://github.com/angular/angular/issues/6005
                        this.changeDetectorRef.detectChanges();
                    }
                }
                else {
                    if (this.placeholder) {
                        // add placeholder element
                        var /** @type {?} */ placeholderText = document.createTextNode(this.placeholder);
                        var /** @type {?} */ placeholderOption = document.createElement('option');
                        placeholderOption.disabled = true;
                        placeholderOption.value = null;
                        placeholderOption.appendChild(placeholderText);
                        this.renderer.invokeElementMethod(this.selectElement, 'prepend', [placeholderOption]);
                    }
                }
                this.initMaterialSelect();
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.listenOptionChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ mutationObserverConfiguration = {
                    childList: true,
                    subtree: true,
                };
                this.mutationObserver = new MutationObserver(function (mutations) {
                    _this.updateMaterialSelect();
                });
                this.mutationObserver.observe(this.selectElement[0], mutationObserverConfiguration);
            };
        /**
         * @return {?}
         */
        MzSelectDirective.prototype.updateMaterialSelect = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initMaterialSelect();
                if (this.filledIn) {
                    this.initFilledIn();
                }
                this.handleDOMEvents();
                // wait for materialize select to be initialized
                // /!\ race condition warning /!\
                setTimeout(function () { return _this.update.emit(); });
            };
        MzSelectDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'select[mzSelect], select[mz-select]',
                    },] },
        ];
        /** @nocollapse */
        MzSelectDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.ChangeDetectorRef, },
                { type: core.Renderer, },
            ];
        };
        MzSelectDirective.propDecorators = {
            "id": [{ type: core.Input },],
            "disabled": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "filledIn": [{ type: core.Input },],
            "update": [{ type: core.Output },],
        };
        return MzSelectDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSelectContainerComponent = (function () {
        function MzSelectContainerComponent() {
        }
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initControlSubscription();
                this.initSelectSubscription();
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeControlSubscription();
                this.removeSelectSubscription();
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.initControlSubscription = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.ngControl) {
                    this.mzSelectDirective.disabled = this.ngControl.control.disabled;
                    this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe(function (status) {
                        // to handle enabling/disabling formControl
                        var /** @type {?} */ disabled = status === 'DISABLED';
                        if (disabled !== _this.mzSelectDirective.disabled) {
                            _this.mzSelectDirective.disabled = disabled;
                            _this.mzSelectDirective.handleDisabled();
                        }
                    });
                    this.selectValueSubscription = this.ngControl.valueChanges.subscribe(function (value) {
                        // to synchronize input and select when value changes programmatically
                        var /** @type {?} */ isDropdownOpen = _this.mzSelectDirective.inputElement.hasClass('active');
                        var /** @type {?} */ inputValue = _this.mzSelectDirective.inputElement.val();
                        var /** @type {?} */ options = _this.mzSelectDirective.selectElement.children('option');
                        var /** @type {?} */ selectedOptions = options.filter('option:selected').toArray();
                        var /** @type {?} */ disabledOptions = options.filter(':disabled').toArray();
                        var /** @type {?} */ selectedOptionText = selectedOptions.length === 0
                            ? disabledOptions.map(function (option) { return option.textContent; })[0]
                            : selectedOptions.map(function (option) { return option.textContent; }).join(', ');
                        if (inputValue !== selectedOptionText && !isDropdownOpen) {
                            _this.mzSelectDirective.updateMaterialSelect();
                        }
                    });
                }
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.initSelectSubscription = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.mzSelectDirective) {
                    this.mzSelectDirective.update
                        .subscribe(function () { return _this.registerOnBlur(); })
                        .next();
                }
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.registerOnBlur = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.mzSelectDirective.inputElement.on('blur', function () {
                    if (_this.ngControl) {
                        _this.ngControl.control.markAsTouched();
                    }
                    if (_this.mzValidationComponent) {
                        _this.mzValidationComponent.setValidationState();
                    }
                });
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.removeControlSubscription = /**
         * @return {?}
         */
            function () {
                if (this.mzSelectDirective) {
                    this.mzSelectDirective.update.unsubscribe();
                    this.mzSelectDirective.inputElement.off();
                }
            };
        /**
         * @return {?}
         */
        MzSelectContainerComponent.prototype.removeSelectSubscription = /**
         * @return {?}
         */
            function () {
                if (this.statusChangesSubscription) {
                    this.statusChangesSubscription.unsubscribe();
                }
                if (this.selectValueSubscription) {
                    this.selectValueSubscription.unsubscribe();
                }
            };
        MzSelectContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-select-container',
                        template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                        styles: [".input-field:not(.inline){display:block}/deep/ .input-field .dropdown-content [type=checkbox]+label{top:-11px}"],
                    },] },
        ];
        /** @nocollapse */
        MzSelectContainerComponent.propDecorators = {
            "inline": [{ type: core.Input },],
            "mzSelectDirective": [{ type: core.ContentChild, args: [MzSelectDirective,] },],
            "mzValidationComponent": [{ type: core.ContentChild, args: [MzValidationComponent,] },],
            "ngControl": [{ type: core.ContentChild, args: [forms.NgControl,] },],
        };
        return MzSelectContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSelectModule = (function () {
        function MzSelectModule() {
        }
        MzSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzSelectDirective,
                            MzSelectContainerComponent,
                        ],
                        exports: [
                            MzSelectDirective,
                            MzSelectContainerComponent,
                        ],
                    },] },
        ];
        return MzSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavCollapsibleHeaderComponent = (function (_super) {
        tslib_1.__extends(MzSidenavCollapsibleHeaderComponent, _super);
        function MzSidenavCollapsibleHeaderComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MzSidenavCollapsibleHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-collapsible-header',
                        template: "<a class=\"collapsible-header waves-effect\"><ng-content></ng-content></a>",
                        styles: [""],
                    },] },
        ];
        return MzSidenavCollapsibleHeaderComponent;
    }(MzRemoveComponentHost));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavCollapsibleComponent = (function () {
        function MzSidenavCollapsibleComponent(changeDetectorRef, renderer) {
            this.changeDetectorRef = changeDetectorRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzSidenavCollapsibleComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initCollapsible();
            };
        /**
         * @return {?}
         */
        MzSidenavCollapsibleComponent.prototype.initCollapsible = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ options = {
                    accordion: false,
                    onClose: this.onClose,
                    onOpen: this.onOpen,
                };
                // need setTimeout otherwise loading directly on the page cause an error
                setTimeout(function () { return _this.renderer.invokeElementMethod($(_this.collapsible.nativeElement), 'collapsible', [options]); });
                this.changeDetectorRef.detectChanges();
            };
        MzSidenavCollapsibleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-collapsible',
                        template: "<li>\n  <ul #collapsible class=\"collapsible collapsible-accordion\">\n    <li>\n      <ng-content select=\"mz-sidenav-collapsible-header\"></ng-content>\n      <div class=\"collapsible-body\">\n        <ul>\n          <ng-content select=\"mz-sidenav-collapsible-content\"></ng-content>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</li>",
                        styles: [":host /deep/ .collapsible-header{padding:0 32px}:host /deep/ .collapsible-header i{color:rgba(0,0,0,.54)}:host /deep/ .collapsible-body li a{font-weight:initial}"],
                    },] },
        ];
        /** @nocollapse */
        MzSidenavCollapsibleComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef, },
                { type: core.Renderer, },
            ];
        };
        MzSidenavCollapsibleComponent.propDecorators = {
            "onClose": [{ type: core.Input },],
            "onOpen": [{ type: core.Input },],
            "collapsible": [{ type: core.ViewChild, args: ['collapsible',] },],
            "header": [{ type: core.ContentChild, args: [MzSidenavCollapsibleHeaderComponent,] },],
        };
        return MzSidenavCollapsibleComponent;
    }());
    var MzSidenavCollapsibleContentDirective = (function () {
        function MzSidenavCollapsibleContentDirective() {
        }
        MzSidenavCollapsibleContentDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'mz-sidenav-collapsible-content' },] },
        ];
        return MzSidenavCollapsibleContentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavDividerComponent = (function () {
        function MzSidenavDividerComponent() {
        }
        MzSidenavDividerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-divider',
                        template: "<li>\n  <div class=\"divider\"></div>\n</li>",
                        styles: [".divider{margin-bottom:8px}"],
                    },] },
        ];
        return MzSidenavDividerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavHeaderComponent = (function () {
        function MzSidenavHeaderComponent() {
        }
        MzSidenavHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-header',
                        template: "<li class=\"sidenav-header\">\n  <ng-content></ng-content>\n</li>",
                        styles: [".sidenav-header{margin-bottom:8px}"],
                    },] },
        ];
        return MzSidenavHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavLinkComponent = (function () {
        function MzSidenavLinkComponent() {
        }
        MzSidenavLinkComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-link',
                        template: "<li\n  [class.active]=\"active\"\n>\n  <ng-content></ng-content>\n</li>\n",
                        styles: [":host /deep/ a[class*=mdi-]::before{color:rgba(0,0,0,.54);margin:-1px 32px 0 0;vertical-align:middle}:host /deep/ a i,:host /deep/ a i.material-icons,:host /deep/ a i[class*=mdi-]{margin-top:-1px}:host /deep/ a i.material-icons::before,:host /deep/ a i::before,:host /deep/ a i[class*=mdi-]::before{vertical-align:middle}"],
                        encapsulation: core.ViewEncapsulation.Emulated,
                    },] },
        ];
        /** @nocollapse */
        MzSidenavLinkComponent.propDecorators = {
            "active": [{ type: core.Input },],
        };
        return MzSidenavLinkComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavSubheaderComponent = (function () {
        function MzSidenavSubheaderComponent() {
        }
        MzSidenavSubheaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav-subheader',
                        template: "<li>\n  <a class=\"subheader\">\n    <ng-content></ng-content>\n  </a>\n</li>",
                        styles: [""],
                    },] },
        ];
        return MzSidenavSubheaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavComponent = (function () {
        function MzSidenavComponent() {
            this._opened = false;
        }
        Object.defineProperty(MzSidenavComponent.prototype, "opened", {
            get: /**
             * @return {?}
             */ function () { return this._opened; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._opened = value;
                this.collapseButton.sideNav(this._opened ? 'show' : 'hide');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzSidenavComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initCollapseButton();
                this.initCollapsibleLinks();
            };
        /**
         * @return {?}
         */
        MzSidenavComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.collapseButton.sideNav('destroy');
            };
        /**
         * @return {?}
         */
        MzSidenavComponent.prototype.initCollapseButton = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // fake button if no collapseButtonId is provided
                this.collapseButton = this.collapseButtonId
                    ? $("#" + this.collapseButtonId)
                    : $(document.createElement('template'));
                // add data-activates to collapse button
                this.collapseButton.attr('data-activates', this.id);
                // extend onOpen function to update opened state
                var /** @type {?} */ onOpen = this.onOpen || (function () { });
                this.onOpen = function () {
                    onOpen();
                    _this._opened = true;
                };
                // extend onClose function to update opened state
                var /** @type {?} */ onClose = this.onClose || (function () { });
                this.onClose = function () {
                    onClose();
                    _this._opened = false;
                };
                // initialize sidenav
                this.collapseButton.sideNav({
                    closeOnClick: this.closeOnClick || false,
                    draggable: this.draggable != null ? this.draggable : true,
                    edge: this.edge || 'left',
                    menuWidth: isNaN(this.width) ? 300 : this.width,
                    onClose: this.onClose,
                    onOpen: this.onOpen,
                });
            };
        /**
         * @return {?}
         */
        MzSidenavComponent.prototype.initCollapsibleLinks = /**
         * @return {?}
         */
            function () {
                // initialize collapsible elements
                $("#" + this.id + " .collapsible").collapsible();
            };
        MzSidenavComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-sidenav',
                        template: "<ul class=\"side-nav {{ backgroundClass }}\"\n  [attr.id]=\"id\"\n  [class.fixed]=\"fixed\">\n  <ng-content></ng-content>\n</ul>",
                    },] },
        ];
        /** @nocollapse */
        MzSidenavComponent.propDecorators = {
            "backgroundClass": [{ type: core.Input },],
            "closeOnClick": [{ type: core.Input },],
            "collapseButtonId": [{ type: core.Input },],
            "draggable": [{ type: core.Input },],
            "edge": [{ type: core.Input },],
            "fixed": [{ type: core.Input },],
            "id": [{ type: core.Input },],
            "onClose": [{ type: core.Input },],
            "onOpen": [{ type: core.Input },],
            "width": [{ type: core.Input },],
        };
        return MzSidenavComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSidenavModule = (function () {
        function MzSidenavModule() {
        }
        MzSidenavModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzSidenavCollapsibleComponent,
                            MzSidenavCollapsibleContentDirective,
                            MzSidenavCollapsibleHeaderComponent,
                            MzSidenavComponent,
                            MzSidenavDividerComponent,
                            MzSidenavHeaderComponent,
                            MzSidenavLinkComponent,
                            MzSidenavSubheaderComponent,
                        ],
                        exports: [
                            MzSidenavCollapsibleComponent,
                            MzSidenavCollapsibleContentDirective,
                            MzSidenavCollapsibleHeaderComponent,
                            MzSidenavComponent,
                            MzSidenavDividerComponent,
                            MzSidenavHeaderComponent,
                            MzSidenavLinkComponent,
                            MzSidenavSubheaderComponent,
                        ],
                    },] },
        ];
        return MzSidenavModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSpinnerComponent = (function () {
        function MzSpinnerComponent() {
        }
        MzSpinnerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-spinner',
                        template: " <div class=\"preloader-wrapper active {{ size }}\">\n\n    <div\n      class=\"spinner-layer\"\n      [class.spinner-red-only]=\"color === 'red'\"\n      [class.spinner-green-only]=\"color === 'green'\"\n      [class.spinner-blue-only]=\"color === 'blue'\"\n      [class.spinner-yellow-only]=\"color === 'yellow'\">\n\n      <div class=\"circle-clipper left\">\n        <div class=\"circle\"></div>\n      </div>\n\n      <div class=\"gap-patch\">\n        <div class=\"circle\"></div>\n      </div>\n\n      <div class=\"circle-clipper right\">\n        <div class=\"circle\"></div>\n      </div>\n    </div>\n  </div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzSpinnerComponent.propDecorators = {
            "color": [{ type: core.Input },],
            "size": [{ type: core.Input },],
        };
        return MzSpinnerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSpinnerModule = (function () {
        function MzSpinnerModule() {
        }
        MzSpinnerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzSpinnerComponent],
                        exports: [MzSpinnerComponent],
                    },] },
        ];
        return MzSpinnerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSwitchDirective = (function () {
        function MzSwitchDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzSwitchDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initElements();
                this.handleInputType();
            };
        /**
         * @return {?}
         */
        MzSwitchDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.switchElement = $(this.elementRef.nativeElement);
                this.switchContainerElement = $(this.elementRef.nativeElement).parent('label').parent('.switch');
                if (this.switchContainerElement.length === 0) {
                    console.error('Input with mz-switch directive must be placed inside an [mz-switch-container] tag', this.switchElement);
                    return;
                }
            };
        /**
         * @return {?}
         */
        MzSwitchDirective.prototype.handleInputType = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ type = this.switchElement.attr('type');
                if (type !== 'checkbox') {
                    this.renderer.setElementAttribute(this.switchElement[0], 'type', 'checkbox');
                }
            };
        MzSwitchDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mzSwitch], [mz-switch]',
                    },] },
        ];
        /** @nocollapse */
        MzSwitchDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzSwitchDirective.propDecorators = {
            "off": [{ type: core.Input },],
            "on": [{ type: core.Input },],
        };
        return MzSwitchDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSwitchContainerComponent = (function () {
        function MzSwitchContainerComponent() {
        }
        MzSwitchContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-switch-container',
                        template: "<div class=\"switch\">\n  <label>\n    <span class=\"off\">{{ mzSwitchDirective?.off }}</span>\n    <ng-content></ng-content>\n    <span class=\"lever\"></span>\n    <span class=\"on\">{{ mzSwitchDirective?.on }}</span>\n  </label>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzSwitchContainerComponent.propDecorators = {
            "mzSwitchDirective": [{ type: core.ContentChild, args: [MzSwitchDirective,] },],
        };
        return MzSwitchContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzSwitchModule = (function () {
        function MzSwitchModule() {
        }
        MzSwitchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzSwitchDirective,
                            MzSwitchContainerComponent,
                        ],
                        exports: [
                            MzSwitchDirective,
                            MzSwitchContainerComponent,
                        ],
                    },] },
        ];
        return MzSwitchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTabItemComponent = (function () {
        function MzTabItemComponent() {
        }
        Object.defineProperty(MzTabItemComponent.prototype, "link", {
            get: /**
             * @return {?}
             */ function () {
                return this.tabItemId ? this.tabItemId : this.label.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        MzTabItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-tab-item',
                        template: "<div id=\"{{ link }}\" class=\"{{ class }}\">\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzTabItemComponent.propDecorators = {
            "active": [{ type: core.Input },],
            "class": [{ type: core.Input },],
            "disabled": [{ type: core.Input },],
            "href": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "tabItemId": [{ type: core.Input },],
            "target": [{ type: core.Input },],
        };
        return MzTabItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTabComponent = (function () {
        function MzTabComponent() {
        }
        /**
         * @return {?}
         */
        MzTabComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initTabs();
            };
        /**
         * @return {?}
         */
        MzTabComponent.prototype.initTabs = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ options = {
                    onShow: this.onShow,
                    responsiveThreshold: this.responsiveThreshold,
                    swipeable: this.swipeable,
                };
                $(this.tabs.nativeElement).tabs(options);
            };
        /**
         * @param {?} tabItemId
         * @return {?}
         */
        MzTabComponent.prototype.selectTab = /**
         * @param {?} tabItemId
         * @return {?}
         */
            function (tabItemId) {
                $(this.tabs.nativeElement).tabs('select_tab', tabItemId);
            };
        MzTabComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-tab',
                        template: "<ul #tabs\n  class=\"tabs\"\n  [class.tabs-fixed-width]=\"fixedTabWidth\">\n  <li class=\"tab\" [class.disabled]=\"tabItem.disabled\" *ngFor=\"let tabItem of tabItems.toArray()\">\n    <a [class.active]=\"tabItem.active\"\n      href=\"{{ tabItem.href ? tabItem.href : '#' + tabItem.link }}\" target=\"{{ tabItem.target }}\">\n      {{ tabItem.label }}\n    </a>\n  </li>\n</ul>\n<div>\n  <ng-content select=\"mz-tab-item\"></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzTabComponent.propDecorators = {
            "fixedTabWidth": [{ type: core.Input },],
            "onShow": [{ type: core.Input },],
            "responsiveThreshold": [{ type: core.Input },],
            "swipeable": [{ type: core.Input },],
            "tabs": [{ type: core.ViewChild, args: ['tabs',] },],
            "tabItems": [{ type: core.ContentChildren, args: [MzTabItemComponent,] },],
        };
        return MzTabComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTabModule = (function () {
        function MzTabModule() {
        }
        MzTabModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            MzTabComponent,
                            MzTabItemComponent,
                        ],
                        exports: [
                            MzTabComponent,
                            MzTabItemComponent,
                        ],
                    },] },
        ];
        return MzTabModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTextareaContainerComponent = (function () {
        function MzTextareaContainerComponent() {
        }
        MzTextareaContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-textarea-container',
                        template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                        styles: [":host /deep/ textarea{display:block}.input-field:not(.inline){display:block}"],
                    },] },
        ];
        /** @nocollapse */
        MzTextareaContainerComponent.propDecorators = {
            "inline": [{ type: core.Input },],
        };
        return MzTextareaContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTextareaPrefixDirective = (function () {
        function MzTextareaPrefixDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzTextareaPrefixDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
            };
        MzTextareaPrefixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'i[mzTextareaPrefix], i[mz-textarea-prefix]',
                    },] },
        ];
        /** @nocollapse */
        MzTextareaPrefixDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        return MzTextareaPrefixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTextareaDirective = (function (_super) {
        tslib_1.__extends(MzTextareaDirective, _super);
        function MzTextareaDirective(ngControl, elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.initTextareaSubscription();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.textareaValueSubscription) {
                    this.textareaValueSubscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    label: function () { return _this.handleLabel(); },
                    length: function () { return _this.handleLength(); },
                    placeholder: function () { return _this.handlePlaceholder(); },
                };
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.textareaElement = $(this.elementRef.nativeElement);
                this.textareaContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
                this.labelElement = this.createLabelElement();
                this.initTextarea();
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.initTextarea = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this.textareaElement[0], 'materialize-textarea', true);
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.initTextareaSubscription = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.ngControl) {
                    this.textareaValueSubscription = this.ngControl.valueChanges.subscribe(function () { return _this.setLabelActive(); });
                }
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.textareaElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.textareaContainerElement.length === 0) {
                    console.error('Textarea must be placed inside a [mz-textarea-container] tag', this.textareaElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                if (this.placeholder || this.textareaElement.val()) {
                    this.renderer.setElementClass(this.labelElement[0], 'active', true);
                }
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.handleLength = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ length = this.length ? this.length.toString() : null;
                this.renderer.setElementAttribute(this.textareaElement[0], 'data-length', length);
                if (length) {
                    this.setCharacterCount();
                }
                else {
                    this.removeCharacterCount();
                }
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.handlePlaceholder = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
                this.renderer.setElementAttribute(this.textareaElement[0], 'placeholder', placeholder);
                this.setLabelActive();
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.setCharacterCount = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.renderer.invokeElementMethod(this.textareaElement, 'characterCounter');
                // force validation
                // need setTimeout otherwise it wont trigger validation right away
                setTimeout(function () {
                    _this.renderer.invokeElementMethod(_this.textareaElement, 'trigger', ['input']);
                    _this.renderer.invokeElementMethod(_this.textareaElement, 'trigger', ['blur']);
                });
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.setLabelActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // need setTimeout otherwise it wont make label float in some circonstances
                // for example: forcing validation for example, reseting form programmaticaly, ...
                setTimeout(function () {
                    var /** @type {?} */ textareaValue = ((_this.textareaElement[0])).value;
                    var /** @type {?} */ isActive = !!_this.placeholder || !!textareaValue;
                    _this.renderer.setElementClass(_this.labelElement[0], 'active', isActive);
                });
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.removeCharacterCount = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.textareaElement.siblings('.character-counter'), 'remove');
                this.removeValidationClasses();
            };
        /**
         * @return {?}
         */
        MzTextareaDirective.prototype.removeValidationClasses = /**
         * @return {?}
         */
            function () {
                // reset valid/invalid state
                this.renderer.setElementClass(this.textareaElement[0], 'invalid', false);
                this.renderer.setElementClass(this.textareaElement[0], 'valid', false);
            };
        MzTextareaDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'textarea[mzTextarea], textarea[mz-textarea]',
                    },] },
        ];
        /** @nocollapse */
        MzTextareaDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: core.Optional },] },
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzTextareaDirective.propDecorators = {
            "id": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "length": [{ type: core.Input },],
        };
        return MzTextareaDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTextareaModule = (function () {
        function MzTextareaModule() {
        }
        MzTextareaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzTextareaContainerComponent,
                            MzTextareaDirective,
                            MzTextareaPrefixDirective,
                        ],
                        exports: [
                            MzTextareaContainerComponent,
                            MzTextareaDirective,
                            MzTextareaPrefixDirective,
                        ],
                    },] },
        ];
        return MzTextareaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTimepickerContainerComponent = (function () {
        function MzTimepickerContainerComponent() {
        }
        MzTimepickerContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mz-timepicker-container',
                        template: "<div\n  class=\"input-field\"\n  [class.inline]=\"inline\"\n>\n  <ng-content></ng-content>\n</div>",
                        styles: [""],
                    },] },
        ];
        /** @nocollapse */
        MzTimepickerContainerComponent.propDecorators = {
            "inline": [{ type: core.Input },],
        };
        return MzTimepickerContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTimepickerDirective = (function (_super) {
        tslib_1.__extends(MzTimepickerDirective, _super);
        function MzTimepickerDirective(ngControl, changeDetectorRef, elementRef, renderer, zone) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.changeDetectorRef = changeDetectorRef;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.zone = zone;
            // materialize uses ClockPicker to create the timepicker
            // complete list of options is available at the following address
            // https://github.com/weareoutman/clockpicker#options
            _this.options = {};
            _this.stopChangePropagation = false;
            return _this;
        }
        Object.defineProperty(MzTimepickerDirective.prototype, "clockpicker", {
            get: /**
             * @return {?}
             */ function () {
                return $('.clockpicker');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initHandlers();
                this.initElements();
                this.initTimepicker();
                this.handleProperties();
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                // remove event handlers
                this.inputElement.off();
                // remove clockpicker added to body by default
                this.clockpicker.remove();
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.initHandlers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.handlers = {
                    label: function () { return _this.handleLabel(); },
                    placeholder: function () { return _this.handlePlaceholder(); },
                };
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.inputContainerElement = /** @type {?} */ ($(this.elementRef.nativeElement).parent('.input-field'));
                this.inputElement = /** @type {?} */ ($(this.elementRef.nativeElement));
                this.labelElement = /** @type {?} */ (this.createLabelElement());
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.initTimepicker = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // append clockpicker to body by default
                if (!this.options.container) {
                    this.options.container = 'body';
                }
                // extend afterHide callback to set label active
                var /** @type {?} */ afterHide = this.options && this.options.afterHide || (function () { });
                this.options = Object.assign({}, this.options, {
                    afterHide: function () {
                        afterHide();
                        _this.setLabelActive();
                    },
                });
                this.renderer.invokeElementMethod(this.inputElement, 'pickatime', [this.options]);
                if (this.ngControl) {
                    // set ngControl value according to selected time in timepicker
                    this.inputElement.on('change', function (event) {
                        _this.ngControl.control.setValue(event.target.value);
                        // mark for change detection
                        // fix form validation with ChangeDetectionStrategy.OnPush
                        // mark for change detection
                        // fix form validation with ChangeDetectionStrategy.OnPush
                        _this.changeDetectorRef.markForCheck();
                    });
                }
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.createLabelElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ labelElement = document.createElement('label');
                labelElement.setAttribute('for', this.id);
                this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
                return $(labelElement);
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.handleProperties = /**
         * @return {?}
         */
            function () {
                if (this.inputContainerElement.length === 0) {
                    console.error('Input with mz-timepicker directive must be placed inside an [mz-timepicker-container] tag', this.inputElement);
                    return;
                }
                _super.prototype.executePropHandlers.call(this);
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.handleLabel = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.handlePlaceholder = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
                this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
                // fix issue in IE where having a placeholder on input make control dirty and trigger validation
                // on page load... note that it still trigger validation on focus and would need a better fix
                // issue : https://github.com/angular/angular/issues/15299
                // workaround : https://stackoverflow.com/a/44967245/5583283
                if (this.ngControl) {
                    this.zone.runOutsideAngular(function () {
                        setTimeout(function () { return _this.ngControl.control.markAsPristine(); });
                    });
                }
                this.setLabelActive();
            };
        /**
         * @return {?}
         */
        MzTimepickerDirective.prototype.setLabelActive = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // need wait for zone to be stable otherwise it wont make label
                // float in some circonstances (clearing value programmatically for example)
                this.zone.onStable
                    .pipe(operators.first())
                    .subscribe(function () {
                    var /** @type {?} */ inputValue = _this.inputElement[0].value;
                    var /** @type {?} */ isActive = !!_this.placeholder || !!inputValue;
                    _this.renderer.setElementClass(_this.labelElement[0], 'active', isActive);
                });
            };
        MzTimepickerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[mzTimepicker], input[mz-timepicker]',
                    },] },
        ];
        /** @nocollapse */
        MzTimepickerDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: core.Optional },] },
                { type: core.ChangeDetectorRef, },
                { type: core.ElementRef, },
                { type: core.Renderer, },
                { type: core.NgZone, },
            ];
        };
        MzTimepickerDirective.propDecorators = {
            "true": [{ type: core.HostBinding, args: ['class.timepicker',] },],
            "id": [{ type: core.Input },],
            "placeholder": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "options": [{ type: core.Input },],
        };
        return MzTimepickerDirective;
    }(HandlePropChanges));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTimepickerModule = (function () {
        function MzTimepickerModule() {
        }
        MzTimepickerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MzTimepickerDirective,
                            MzTimepickerContainerComponent,
                        ],
                        exports: [
                            MzTimepickerDirective,
                            MzTimepickerContainerComponent,
                        ],
                    },] },
        ];
        return MzTimepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzToastService = (function () {
        function MzToastService() {
        }
        /**
         * @param {?} message
         * @param {?} displayLength
         * @param {?=} className
         * @param {?=} completeCallback
         * @return {?}
         */
        MzToastService.prototype.show = /**
         * @param {?} message
         * @param {?} displayLength
         * @param {?=} className
         * @param {?=} completeCallback
         * @return {?}
         */
            function (message, displayLength, className, completeCallback) {
                Materialize.toast(message, displayLength, className, completeCallback);
            };
        MzToastService.decorators = [
            { type: core.Injectable },
        ];
        return MzToastService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzToastModule = (function () {
        function MzToastModule() {
        }
        MzToastModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [MzToastService],
                    },] },
        ];
        return MzToastModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTooltipDirective = (function () {
        function MzTooltipDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        MzTooltipDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initElements();
            };
        /**
         * @return {?}
         */
        MzTooltipDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initTooltip();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MzTooltipDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.targetElement) {
                    this.initTooltip();
                }
            };
        /**
         * @return {?}
         */
        MzTooltipDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.renderer.invokeElementMethod(this.targetElement, 'tooltip', ['remove']);
            };
        /**
         * @return {?}
         */
        MzTooltipDirective.prototype.initElements = /**
         * @return {?}
         */
            function () {
                this.targetElement = $(this.elementRef.nativeElement);
            };
        /**
         * @return {?}
         */
        MzTooltipDirective.prototype.initTooltip = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ tooltipOptions = {
                    delay: isNaN(this.delay) || this.delay == null ? 350 : this.delay,
                    html: this.html || false,
                    position: this.position || 'bottom',
                    tooltip: this.tooltip,
                };
                this.renderer.invokeElementMethod(this.targetElement, 'tooltip', [tooltipOptions]);
            };
        MzTooltipDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mzTooltip], [mz-tooltip]',
                    },] },
        ];
        /** @nocollapse */
        MzTooltipDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer, },
            ];
        };
        MzTooltipDirective.propDecorators = {
            "delay": [{ type: core.Input },],
            "html": [{ type: core.Input },],
            "position": [{ type: core.Input },],
            "tooltip": [{ type: core.Input },],
        };
        return MzTooltipDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzTooltipModule = (function () {
        function MzTooltipModule() {
        }
        MzTooltipModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MzTooltipDirective],
                        exports: [MzTooltipDirective],
                    },] },
        ];
        return MzTooltipModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MzValidationModule = (function () {
        function MzValidationModule() {
        }
        MzValidationModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            MzErrorMessageComponent,
                            MzValidationComponent,
                        ],
                        entryComponents: [MzErrorMessageComponent],
                        exports: [
                            MzErrorMessageComponent,
                            MzValidationComponent,
                        ],
                    },] },
        ];
        return MzValidationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ MZ_MODULES = [
        common.CommonModule,
        forms.FormsModule,
        MzBadgeModule,
        MzButtonModule,
        MzCardModule,
        MzCheckboxModule,
        MzChipModule,
        MzCollapsibleModule,
        MzCollectionModule,
        MzDatepickerModule,
        MzDropdownModule,
        MzFeatureDiscoveryModule,
        MzIconModule,
        MzIconMdiModule,
        MzInjectionModule,
        MzInputModule,
        MzMediaModule,
        MzModalModule,
        MzNavbarModule,
        MzPaginationModule,
        MzParallaxModule,
        MzProgressModule,
        MzRadioButtonModule,
        MzSelectModule,
        MzSidenavModule,
        MzSpinnerModule,
        MzSwitchModule,
        MzTabModule,
        MzTextareaModule,
        MzTimepickerModule,
        MzToastModule,
        MzTooltipModule,
        MzValidationModule,
    ];
    /**
     * @deprecated
     * Import specific component modules instead (MzBadgeModule, MzCardModule, etc)
     * https://github.com/sherweb/ng2-materialize#materializemodule-deprecated
     */
    var MaterializeModule = (function () {
        function MaterializeModule() {
        }
        /**
         * @return {?}
         */
        MaterializeModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: MaterializeModule,
                };
            };
        MaterializeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: MZ_MODULES,
                        exports: MZ_MODULES,
                    },] },
        ];
        return MaterializeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ MatchOperator = (function () {
        function MatchOperator() {
        }
        return MatchOperator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ Media = (function () {
        function Media() {
        }
        return Media;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ MediaBreakpoint = (function () {
        function MediaBreakpoint() {
        }
        return MediaBreakpoint;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var MzBaseModal = (function () {
        function MzBaseModal() {
        }
        /**
         * @return {?}
         */
        MzBaseModal.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.modalComponent.openModal();
            };
        MzBaseModal.propDecorators = {
            "modalComponent": [{ type: core.ViewChild, args: [MzModalComponent,] },],
        };
        return MzBaseModal;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.MzBadgeComponent = MzBadgeComponent;
    exports.MzBadgeModule = MzBadgeModule;
    exports.MzButtonDirective = MzButtonDirective;
    exports.MzButtonModule = MzButtonModule;
    exports.MzCardComponent = MzCardComponent;
    exports.MzCardTitleDirective = MzCardTitleDirective;
    exports.MzCardContentDirective = MzCardContentDirective;
    exports.MzCardActionDirective = MzCardActionDirective;
    exports.MzCardModule = MzCardModule;
    exports.MzCheckboxContainerComponent = MzCheckboxContainerComponent;
    exports.MzCheckboxDirective = MzCheckboxDirective;
    exports.MzCheckboxModule = MzCheckboxModule;
    exports.MzChipInputComponent = MzChipInputComponent;
    exports.MzChipComponent = MzChipComponent;
    exports.MzChipModule = MzChipModule;
    exports.MzCollapsibleItemComponent = MzCollapsibleItemComponent;
    exports.MzCollapsibleItemBodyDirective = MzCollapsibleItemBodyDirective;
    exports.MzCollapsibleItemHeaderDirective = MzCollapsibleItemHeaderDirective;
    exports.MzCollapsibleComponent = MzCollapsibleComponent;
    exports.MzCollapsibleModule = MzCollapsibleModule;
    exports.MzAvatarDirective = MzAvatarDirective;
    exports.MzCollectionHeaderComponent = MzCollectionHeaderComponent;
    exports.MzCollectionItemComponent = MzCollectionItemComponent;
    exports.MzCollectionLinkDirective = MzCollectionLinkDirective;
    exports.MzCollectionComponent = MzCollectionComponent;
    exports.MzCollectionModule = MzCollectionModule;
    exports.MzSecondaryContentDirective = MzSecondaryContentDirective;
    exports.MzDatepickerContainerComponent = MzDatepickerContainerComponent;
    exports.MzDatepickerDirective = MzDatepickerDirective;
    exports.MzDatepickerModule = MzDatepickerModule;
    exports.MzDropdownDividerComponent = MzDropdownDividerComponent;
    exports.MzDropdownItemComponent = MzDropdownItemComponent;
    exports.MzDropdownComponent = MzDropdownComponent;
    exports.MzDropdownModule = MzDropdownModule;
    exports.MzFeatureDiscoveryComponent = MzFeatureDiscoveryComponent;
    exports.MzFeatureDiscoveryModule = MzFeatureDiscoveryModule;
    exports.MzIconDirective = MzIconDirective;
    exports.MzIconModule = MzIconModule;
    exports.MzIconMdiDirective = MzIconMdiDirective;
    exports.MzIconMdiModule = MzIconMdiModule;
    exports.MzInputContainerComponent = MzInputContainerComponent;
    exports.MzInputPrefixDirective = MzInputPrefixDirective;
    exports.MzInputDirective = MzInputDirective;
    exports.MzInputModule = MzInputModule;
    exports.MaterializeModule = MaterializeModule;
    exports.MzMediaModule = MzMediaModule;
    exports.MzMediaService = MzMediaService;
    exports.MatchOperator = MatchOperator;
    exports.Media = Media;
    exports.MediaBreakpoint = MediaBreakpoint;
    exports.MzBaseModal = MzBaseModal;
    exports.MzModalCloseDirective = MzModalCloseDirective;
    exports.MzModalComponent = MzModalComponent;
    exports.MzModalHeaderDirective = MzModalHeaderDirective;
    exports.MzModalContentDirective = MzModalContentDirective;
    exports.MzModalFooterDirective = MzModalFooterDirective;
    exports.MzModalModule = MzModalModule;
    exports.MzModalService = MzModalService;
    exports.MzNavbarComponent = MzNavbarComponent;
    exports.MzNavbarModule = MzNavbarModule;
    exports.MzNavbarItemComponent = MzNavbarItemComponent;
    exports.MzNavbarItemContainerComponent = MzNavbarItemContainerComponent;
    exports.MzPaginationPageButtonComponent = MzPaginationPageButtonComponent;
    exports.MzPaginationComponent = MzPaginationComponent;
    exports.MzPaginationModule = MzPaginationModule;
    exports.MzParallaxComponent = MzParallaxComponent;
    exports.MzParallaxModule = MzParallaxModule;
    exports.MzProgressComponent = MzProgressComponent;
    exports.MzProgressModule = MzProgressModule;
    exports.MzRadioButtonContainerComponent = MzRadioButtonContainerComponent;
    exports.MzRadioButtonDirective = MzRadioButtonDirective;
    exports.MzRadioButtonModule = MzRadioButtonModule;
    exports.MzSelectContainerComponent = MzSelectContainerComponent;
    exports.MzSelectDirective = MzSelectDirective;
    exports.MzSelectModule = MzSelectModule;
    exports.Handlers = Handlers;
    exports.HandlePropChanges = HandlePropChanges;
    exports.MzInjectionModule = MzInjectionModule;
    exports.MzInjectionService = MzInjectionService;
    exports.MzRemoveComponentHost = MzRemoveComponentHost;
    exports.MzSidenavComponent = MzSidenavComponent;
    exports.MzSidenavModule = MzSidenavModule;
    exports.MzSidenavCollapsibleHeaderComponent = MzSidenavCollapsibleHeaderComponent;
    exports.MzSidenavCollapsibleComponent = MzSidenavCollapsibleComponent;
    exports.MzSidenavCollapsibleContentDirective = MzSidenavCollapsibleContentDirective;
    exports.MzSidenavDividerComponent = MzSidenavDividerComponent;
    exports.MzSidenavHeaderComponent = MzSidenavHeaderComponent;
    exports.MzSidenavLinkComponent = MzSidenavLinkComponent;
    exports.MzSidenavSubheaderComponent = MzSidenavSubheaderComponent;
    exports.MzSpinnerComponent = MzSpinnerComponent;
    exports.MzSpinnerModule = MzSpinnerModule;
    exports.MzSwitchContainerComponent = MzSwitchContainerComponent;
    exports.MzSwitchDirective = MzSwitchDirective;
    exports.MzSwitchModule = MzSwitchModule;
    exports.MzTabItemComponent = MzTabItemComponent;
    exports.MzTabComponent = MzTabComponent;
    exports.MzTabModule = MzTabModule;
    exports.MzTextareaContainerComponent = MzTextareaContainerComponent;
    exports.MzTextareaPrefixDirective = MzTextareaPrefixDirective;
    exports.MzTextareaDirective = MzTextareaDirective;
    exports.MzTextareaModule = MzTextareaModule;
    exports.MzTimepickerContainerComponent = MzTimepickerContainerComponent;
    exports.MzTimepickerDirective = MzTimepickerDirective;
    exports.MzTimepickerModule = MzTimepickerModule;
    exports.MzToastService = MzToastService;
    exports.MzToastModule = MzToastModule;
    exports.MzTooltipDirective = MzTooltipDirective;
    exports.MzTooltipModule = MzTooltipModule;
    exports.MzErrorMessageComponent = MzErrorMessageComponent;
    exports.ErrorMessageResource = ErrorMessageResource;
    exports.MzValidationComponent = MzValidationComponent;
    exports.MzValidationModule = MzValidationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,