import { Component, Input, NgModule, ApplicationRef, ComponentFactoryResolver, Injectable, Injector, ElementRef, Inject, Directive, Renderer, ChangeDetectorRef, HostBinding, ViewChild, EventEmitter, forwardRef, NgZone, Output, ContentChildren, Renderer2, Optional, HostListener, ViewContainerRef, ViewEncapsulation, ContentChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, NgControl, FormsModule } from '@angular/forms';
import { interval, fromEvent, Observable } from 'rxjs';
import { first, skipWhile, map, publishReplay, refCount, startWith } from 'rxjs/operators';
import { animate, style, transition, trigger } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzBadgeComponent {
}
MzBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-badge',
                template: `<span #badge
  class="badge {{ badgeClass }}"
  [class.new]="new || !!badgeClass"
  [attr.data-badge-caption]="caption">
  {{ value }}
</span>
`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzBadgeComponent.propDecorators = {
    "badgeClass": [{ type: Input },],
    "caption": [{ type: Input },],
    "new": [{ type: Input },],
    "value": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzBadgeModule {
}
MzBadgeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzBadgeComponent],
                exports: [MzBadgeComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class Handlers {
}
class HandlePropChanges {
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.handlers) {
            this.executePropHandlers(changes);
        }
    }
    /**
     * @param {?=} props
     * @return {?}
     */
    executePropHandlers(props = this.handlers) {
        Object.keys(props).forEach(prop => {
            if (this.handlers[prop]) {
                const /** @type {?} */ previousValue = (/** @type {?} */ (props[prop])).previousValue;
                this.handlers[prop](previousValue);
            }
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInjectionService {
    /**
     * @param {?} applicationRef
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(applicationRef, componentFactoryResolver, injector) {
        this.applicationRef = applicationRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
    }
    /**
     * Appends a component to an adjacent location.
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    appendComponent(componentClass, options = {}, location = this.getContainerElement()) {
        // instantiate component to load
        const /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        const /** @type {?} */ componentRef = componentFactory.create(this.injector);
        // project the options passed to the component instance
        this.projectComponentInputs(componentRef, options);
        // attach view for dirty checking
        this.applicationRef.attachView(componentRef.hostView);
        // detach view when component is destroyed
        componentRef.onDestroy(() => {
            this.applicationRef.detachView(componentRef.hostView);
        });
        // append component to location in the DOM where we want it to be rendered
        const /** @type {?} */ componentRootNode = this.getComponentRootNode(componentRef);
        location.appendChild(componentRootNode);
        return componentRef;
    }
    /**
     * Overrides the default container element.
     * @param {?} container
     * @return {?}
     */
    setRootViewContainer(container) {
        this.container = container;
    }
    /**
     * Gets the html element for a component ref.
     * @param {?} componentRef
     * @return {?}
     */
    getComponentRootNode(componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    }
    /**
     * Gets the container element.
     * @return {?}
     */
    getContainerElement() {
        return this.container || document.body;
    }
    /**
     * Projects the inputs onto the component.
     * @template T
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    projectComponentInputs(component, options) {
        if (options) {
            const /** @type {?} */ props = Object.getOwnPropertyNames(options);
            for (const /** @type {?} */ prop of props) {
                component.instance[prop] = options[prop];
            }
        }
        return component;
    }
}
MzInjectionService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MzInjectionService.ctorParameters = () => [
    { type: ApplicationRef, },
    { type: ComponentFactoryResolver, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInjectionModule {
}
MzInjectionModule.decorators = [
    { type: NgModule, args: [{
                providers: [MzInjectionService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MzRemoveComponentHost {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.childrenElement = [];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ hostElement = this.elementRef.nativeElement;
        this.parentElement = hostElement.parentElement;
        // move child out of the host element
        while (hostElement.firstChild) {
            this.childrenElement.push(this.parentElement.insertBefore(hostElement.firstChild, hostElement));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // remove moved out element
        this.childrenElement.forEach(childElement => this.parentElement.removeChild(childElement));
    }
}
/** @nocollapse */
MzRemoveComponentHost.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzButtonDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            disabled: () => this.handleDisabled(),
            flat: () => this.handleFlat(),
            float: () => this.handleFloat(),
            large: () => this.handleLarge(),
            noWaves: () => this.handleNoWaves(),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', true);
    }
    /**
     * @return {?}
     */
    handleDisabled() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'disabled', this.disabled);
    }
    /**
     * @return {?}
     */
    handleFlat() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', !this.flat);
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-flat', this.flat);
    }
    /**
     * @return {?}
     */
    handleFloat() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-floating', this.float);
    }
    /**
     * @return {?}
     */
    handleLarge() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-large', this.large);
    }
    /**
     * @return {?}
     */
    handleNoWaves() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-effect', !this.noWaves);
        if (!this.flat) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-light', !this.noWaves);
        }
    }
}
MzButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: `
    a[mz-button],
    a[mzButton],
    button[mz-button],
    button[mzButton]`,
            },] },
];
/** @nocollapse */
MzButtonDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzButtonDirective.propDecorators = {
    "disabled": [{ type: Input },],
    "flat": [{ type: Input },],
    "float": [{ type: Input },],
    "large": [{ type: Input },],
    "noWaves": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzButtonModule {
}
MzButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzButtonDirective],
                exports: [MzButtonDirective],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCardComponent {
    /**
     * @param {?} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hasCardAction = true;
        this.hasCardTitle = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.hasCardTitle = this.hasTitleTagAndNotEmpty();
        this.hasCardAction = this.hasActionTagAndNotEmpty();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    hasActionTagAndNotEmpty() {
        const /** @type {?} */ cardActionElement = this.cardAction.nativeElement.querySelector('mz-card-action');
        return this.isElementDisplayed(cardActionElement);
    }
    /**
     * @return {?}
     */
    hasTitleTagAndNotEmpty() {
        const /** @type {?} */ cardTitleElement = this.cardTitle.nativeElement.querySelector('mz-card-title');
        return this.isElementDisplayed(cardTitleElement);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    isElementDisplayed(element) {
        return element && element.innerHTML.trim() !== '';
    }
}
MzCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-card',
                template: `<div class="card-content">

  <div #cardTitle class="card-title" *ngIf="hasCardTitle">
    <ng-content select="mz-card-title"></ng-content>
  </div>

  <ng-content select="mz-card-content"></ng-content>
</div>

<div #cardAction class="card-action" *ngIf="hasCardAction">
  <ng-content select="mz-card-action"></ng-content>
</div>`,
                styles: [`:host{display:block}`],
            },] },
];
/** @nocollapse */
MzCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
MzCardComponent.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.card',] },],
    "hoverable": [{ type: HostBinding, args: ['class.hoverable',] }, { type: Input },],
    "cardTitle": [{ type: ViewChild, args: ['cardTitle',] },],
    "cardAction": [{ type: ViewChild, args: ['cardAction',] },],
};
class MzCardTitleDirective {
}
MzCardTitleDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-card-title' },] },
];
class MzCardContentDirective {
}
MzCardContentDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-card-content' },] },
];
class MzCardActionDirective {
}
MzCardActionDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-card-action' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCardModule {
}
MzCardModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    MzCardActionDirective,
                    MzCardComponent,
                    MzCardContentDirective,
                    MzCardTitleDirective,
                ],
                exports: [
                    MzCardActionDirective,
                    MzCardComponent,
                    MzCardContentDirective,
                    MzCardTitleDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxContainerComponent {
}
MzCheckboxContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-checkbox-container',
                template: `<p class="checkbox-field">
  <ng-content></ng-content>
</p>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            filledIn: () => this.handleFilledIn(),
            label: () => this.handleLabel(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.checkboxElement = $(this.elementRef.nativeElement);
        this.checkboxContainerElement = $(this.elementRef.nativeElement).parent('.checkbox-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.checkboxElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.checkboxContainerElement.length === 0) {
            console.error('Input with mz-checkbox directive must be placed inside a [mz-checkbox-container] tag', this.checkboxElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleFilledIn() {
        this.renderer.setElementClass(this.checkboxElement[0], 'filled-in', this.filledIn);
    }
}
MzCheckboxDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzCheckbox], input[mz-checkbox]',
            },] },
];
/** @nocollapse */
MzCheckboxDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzCheckboxDirective.propDecorators = {
    "id": [{ type: HostBinding }, { type: Input },],
    "filledIn": [{ type: Input },],
    "label": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxModule {
}
MzCheckboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzCheckboxDirective,
                    MzCheckboxContainerComponent,
                ],
                exports: [
                    MzCheckboxDirective,
                    MzCheckboxContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipInputComponent {
    /**
     * @param {?} elementRef
     * @param {?} zone
     */
    constructor(elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        this.add = new EventEmitter();
        this.delete = new EventEmitter();
        this.select = new EventEmitter();
        this.onChangeCallback = (data) => { };
    }
    /**
     * @return {?}
     */
    get value() {
        return /** @type {?} */ (this.chipInputElement.material_chip('data'));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.initMaterializeChip();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.chipInputElement.off('chip.add');
        this.chipInputElement.off('chip.delete');
        this.chipInputElement.off('chip.select');
    }
    /**
     * @return {?}
     */
    initElements() {
        this.chipInputElement = $(this.elementRef.nativeElement);
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    initMaterializeChip(value) {
        // fix issue autocomplete is not a function
        // https://github.com/Dogfalo/materialize/issues/4401
        this.zone.runOutsideAngular(() => {
            setTimeout(() => {
                this.chipInputElement.material_chip({
                    autocompleteOptions: this.autocompleteOptions,
                    data: value || this.value,
                    placeholder: this.placeholder,
                    secondaryPlaceholder: this.secondaryPlaceholder,
                });
            });
        });
        this.chipInputElement.on('chip.add', (event, chip) => {
            this.onChangeCallback(this.value);
            this.add.emit(chip);
        });
        this.chipInputElement.on('chip.delete', (event, chip) => {
            this.onChangeCallback(this.value);
            this.delete.emit(chip);
        });
        this.chipInputElement.on('chip.select', (event, chip) => {
            this.select.emit(chip);
        });
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value && value !== this.value) {
            this.initMaterializeChip(value);
        }
    }
}
MzChipInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-chip-input',
                template: ``,
                styles: [`:host{display:block}`],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MzChipInputComponent),
                        multi: true,
                    },
                ],
            },] },
];
/** @nocollapse */
MzChipInputComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
MzChipInputComponent.propDecorators = {
    "autocompleteOptions": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "secondaryPlaceholder": [{ type: Input },],
    "add": [{ type: Output },],
    "delete": [{ type: Output },],
    "select": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.chipClass = true;
        this.close = false;
        this.delete = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get chipElement() {
        return /** @type {?} */ (this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    onDelete() {
        let /** @type {?} */ value = '';
        for (let /** @type {?} */ i = 0; i < this.chipElement.childNodes.length; i++) {
            if (this.chipElement.childNodes.item(i).nodeType === Node.TEXT_NODE) {
                value += this.chipElement.childNodes.item(i).nodeValue;
            }
        }
        this.delete.emit(value.trim());
    }
}
MzChipComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-chip',
                template: `<ng-content></ng-content>
<i class="close material-icons" (click)="onDelete()" *ngIf="close">close</i>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzChipComponent.ctorParameters = () => [
    { type: ElementRef, },
];
MzChipComponent.propDecorators = {
    "chipClass": [{ type: HostBinding, args: ['class.chip',] },],
    "close": [{ type: Input },],
    "delete": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipModule {
}
MzChipModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    MzChipComponent,
                    MzChipInputComponent,
                ],
                exports: [
                    MzChipComponent,
                    MzChipInputComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleItemComponent extends MzRemoveComponentHost {
}
MzCollapsibleItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-collapsible-item',
                template: `<li>
  <div class="collapsible-header"
    [class.active]="active"
  >
    <ng-content select="mz-collapsible-item-header"></ng-content>
  </div>
  <div class="collapsible-body">
    <ng-content select="mz-collapsible-item-body"></ng-content>
  </div>
</li>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzCollapsibleItemComponent.propDecorators = {
    "active": [{ type: Input },],
};
class MzCollapsibleItemBodyDirective {
}
MzCollapsibleItemBodyDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-collapsible-item-body' },] },
];
class MzCollapsibleItemHeaderDirective {
}
MzCollapsibleItemHeaderDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-collapsible-item-header' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.handleDataCollapsible();
        this.initCollapsible();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        $(this.collapsible.nativeElement).collapsible('destroy');
    }
    /**
     * @param {?} collapsibleItemIndex
     * @return {?}
     */
    close(collapsibleItemIndex) {
        $(this.collapsible.nativeElement).collapsible('close', collapsibleItemIndex);
    }
    /**
     * @return {?}
     */
    initCollapsible() {
        const /** @type {?} */ options = {
            accordion: false,
            onClose: this.onClose,
            onOpen: this.onOpen,
        };
        $(this.collapsible.nativeElement).collapsible(options);
    }
    /**
     * @return {?}
     */
    handleDataCollapsible() {
        if (this.mode) {
            this.renderer.setElementAttribute(this.collapsible.nativeElement, 'data-collapsible', this.mode);
        }
    }
    /**
     * @param {?} collapsibleItemIndex
     * @return {?}
     */
    open(collapsibleItemIndex) {
        $(this.collapsible.nativeElement).collapsible('open', collapsibleItemIndex);
    }
}
MzCollapsibleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-collapsible',
                template: `<ul #collapsible
  class="collapsible"
  [class.popout]="popout"
  [hidden]="items.length === 0"
>
  <ng-content></ng-content>
</ul>`,
                styles: [`/deep/ .collapsible-header{clear:both}/deep/ .collapsible-body{clear:both}`],
            },] },
];
/** @nocollapse */
MzCollapsibleComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzCollapsibleComponent.propDecorators = {
    "mode": [{ type: Input },],
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "popout": [{ type: Input },],
    "collapsible": [{ type: ViewChild, args: ['collapsible',] },],
    "items": [{ type: ContentChildren, args: [MzCollapsibleItemComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleModule {
}
MzCollapsibleModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzCollapsibleComponent,
                    MzCollapsibleItemBodyDirective,
                    MzCollapsibleItemComponent,
                    MzCollapsibleItemHeaderDirective,
                ],
                exports: [
                    MzCollapsibleComponent,
                    MzCollapsibleItemBodyDirective,
                    MzCollapsibleItemComponent,
                    MzCollapsibleItemHeaderDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzAvatarDirective {
}
MzAvatarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mzAvatar], [mz-avatar]',
            },] },
];
/** @nocollapse */
MzAvatarDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.circle',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionHeaderComponent {
}
MzCollectionHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-collection-header',
                template: `<div class="collection-header">
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionItemComponent {
}
MzCollectionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-collection-item',
                template: `<ng-content></ng-content>`,
                styles: [`:host{display:block}`],
            },] },
];
/** @nocollapse */
MzCollectionItemComponent.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.collection-item',] },],
    "avatar": [{ type: HostBinding, args: ['class.avatar',] }, { type: Input },],
    "dismissable": [{ type: HostBinding, args: ['class.dismissable',] }, { type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionLinkDirective {
}
MzCollectionLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mzCollectionLink], [mz-collection-link]',
            },] },
];
/** @nocollapse */
MzCollectionLinkDirective.propDecorators = {
    "active": [{ type: HostBinding, args: ['class.active',] }, { type: Input },],
    "true": [{ type: HostBinding, args: ['class.collection-item',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.initCollectionHeader();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.collectionElement = $(this.elementRef.nativeElement).find('.collection');
        this.collectionHeaderElement = $(this.elementRef.nativeElement).find('.collection-header');
    }
    /**
     * @return {?}
     */
    initCollectionHeader() {
        if (this.collectionHeaderElement.length > 0) {
            this.renderer.addClass(this.collectionElement[0], 'with-header');
        }
    }
}
MzCollectionComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-collection',
                template: `<div class="collection">
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzCollectionComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSecondaryContentDirective {
}
MzSecondaryContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mzSecondaryContent], [mz-secondary-content]',
            },] },
];
/** @nocollapse */
MzSecondaryContentDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.secondary-content',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionModule {
}
MzCollectionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzAvatarDirective,
                    MzCollectionComponent,
                    MzCollectionItemComponent,
                    MzCollectionLinkDirective,
                    MzCollectionHeaderComponent,
                    MzSecondaryContentDirective,
                ],
                exports: [
                    MzAvatarDirective,
                    MzCollectionComponent,
                    MzCollectionItemComponent,
                    MzCollectionLinkDirective,
                    MzCollectionHeaderComponent,
                    MzSecondaryContentDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerContainerComponent {
}
MzDatepickerContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-datepicker-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzDatepickerContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, changeDetectorRef, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        // materialize uses pickadate.js to create the datepicker
        // complete list of options is available at the following address
        // http://amsul.ca/pickadate.js/date/#options
        this.options = {};
        this.isInitRound = true;
        this.stopChangePropagation = false;
    }
    /**
     * @return {?}
     */
    get format() {
        return this.options.format || this.options.formatSubmit || null;
    }
    /**
     * @return {?}
     */
    get formatSubmit() {
        return this.options.formatSubmit || this.options.format || null;
    }
    /**
     * @return {?}
     */
    get ngControlValue() {
        return this.ngControl.value === '' ? null : this.ngControl.value;
    }
    /**
     * @return {?}
     */
    get picker() {
        return this.inputElement.pickadate('picker');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initDatepicker();
        this.initInputSubscription();
        this.handleProperties();
        this.isInitRound = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            options: () => this.handleOptions(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.inputElement = $(this.elementRef.nativeElement);
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    initDatepicker() {
        // set default format/formatSubmit options
        if (this.format) {
            this.options.format = this.format;
        }
        if (this.formatSubmit) {
            this.options.formatSubmit = this.formatSubmit;
        }
        // extends onClose function to fix datepicker focus issue
        // https://github.com/Dogfalo/materialize/issues/2067#issuecomment-142107599
        const /** @type {?} */ onCloseFn = this.options && this.options.onClose || (() => { });
        this.options = Object.assign({}, this.options, {
            onClose: (event) => {
                onCloseFn(event);
                this.renderer.invokeElementMethod(document.activeElement, 'blur');
            },
        });
        this.renderer.invokeElementMethod(this.inputElement, 'pickadate', [this.options]);
        if (this.ngControl) {
            // set datepicker initial value according to ngControl
            this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
            // set ngControl value according to selected date in datepicker
            this.picker.on('set', () => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // apply options.formatSubmit to ngControl value
                const /** @type {?} */ submitValue = this.formatSubmit
                    ? this.picker.get('select', this.formatSubmit)
                    : this.picker.get('value');
                this.ngControl.control.setValue(submitValue);
                // apply options.format to input text
                const /** @type {?} */ formatValue = this.format
                    ? this.picker.get('select', this.format)
                    : this.picker.get('value');
                this.inputElement.val(formatValue);
                // set label active status
                this.setLabelActive();
                // mark for change detection
                // fix form validation with ChangeDetectionStrategy.OnPush
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * @return {?}
     */
    initInputSubscription() {
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(() => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // set selected date in datepicker according to ngControl value
                this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
                // set label active status
                this.setLabelActive();
            });
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-datepicker directive must be placed inside an [mz-datepicker-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleOptions() {
        if (!this.isInitRound) {
            this.picker.set(this.options);
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty and trigger validation
        // on page load... note that it still trigger validation on focus and would need a better fix
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(() => this.ngControl.control.markAsPristine());
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances (forcing validation for example)
        setTimeout(() => {
            const /** @type {?} */ inputValue = (/** @type {?} */ (this.inputElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
}
MzDatepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzDatepicker], input[mz-datepicker]',
            },] },
];
/** @nocollapse */
MzDatepickerDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer, },
];
MzDatepickerDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.datepicker',] },],
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "options": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerModule {
}
MzDatepickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzDatepickerDirective,
                    MzDatepickerContainerComponent,
                ],
                exports: [
                    MzDatepickerDirective,
                    MzDatepickerContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownDividerComponent {
}
MzDropdownDividerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-dropdown-divider',
                template: `<li class="divider"></li>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownItemComponent {
}
MzDropdownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-dropdown-item',
                template: `<li>
  <ng-content></ng-content>
</li>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownComponent extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initDropdownButtonElement();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    close() {
        setTimeout(() => this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', ['close']));
    }
    /**
     * @return {?}
     */
    initDropdownButtonElement() {
        this.dropdownButtonElement = $(`#${this.dropdownButtonId}`);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: () => this.handleDropdown(),
            belowOrigin: () => this.handleDropdown(),
            constrainWidth: () => this.handleDropdown(),
            dropdownButtonId: () => this.handleDataActivates(),
            gutter: () => this.handleDropdown(),
            hover: () => this.handleDropdown(),
            id: () => this.handleDropdown(),
            inDuration: () => this.handleDropdown(),
            outDuration: () => this.handleDropdown(),
            stopPropagation: () => this.handleDropdown(),
        };
    }
    /**
     * @return {?}
     */
    handleDataActivates() {
        this.renderer.setElementAttribute(this.dropdownButtonElement[0], 'data-activates', this.id);
    }
    /**
     * @return {?}
     */
    handleDropdown() {
        this.validateProperties();
        const /** @type {?} */ options = {
            alignment: this.align,
            belowOrigin: this.belowOrigin,
            constrainWidth: this.constrainWidth,
            gutter: this.gutter,
            hover: this.hover,
            inDuration: this.inDuration,
            outDuration: this.outDuration,
            stopPropagation: this.stopPropagation,
        };
        // Initialize dropdown button for dropdown
        this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', [options]);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        this.handleDataActivates();
        this.handleDropdown();
    }
    /**
     * @return {?}
     */
    open() {
        setTimeout(() => this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', ['open']));
    }
    /**
     * @return {?}
     */
    validateProperties() {
        if (!this.id) {
            throw new Error('Attribute [id] from mz-dropdown is required. ' + this.elementRef.nativeElement);
        }
        if (this.dropdownButtonElement.length === 0) {
            throw new Error('Attribute [dropdownButtonId] from mz-dropdown is required and should be an existing element. ' +
                this.elementRef.nativeElement);
        }
    }
}
MzDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-dropdown',
                template: `<ul
  class="dropdown-content"
  [attr.id]="id"
>
  <ng-content></ng-content>
</ul>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzDropdownComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzDropdownComponent.propDecorators = {
    "align": [{ type: Input },],
    "belowOrigin": [{ type: Input },],
    "constrainWidth": [{ type: Input },],
    "dropdownButtonId": [{ type: Input },],
    "gutter": [{ type: Input },],
    "hover": [{ type: Input },],
    "id": [{ type: Input },],
    "inDuration": [{ type: Input },],
    "outDuration": [{ type: Input },],
    "stopPropagation": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownModule {
}
MzDropdownModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzDropdownComponent,
                    MzDropdownDividerComponent,
                    MzDropdownItemComponent,
                ],
                exports: [
                    MzDropdownComponent,
                    MzDropdownDividerComponent,
                    MzDropdownItemComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzFeatureDiscoveryComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.targetClass = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.target = $(this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    close() {
        this.target.tapTarget('close');
    }
    /**
     * @return {?}
     */
    open() {
        this.target.tapTarget('open');
    }
}
MzFeatureDiscoveryComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-feature-discovery',
                template: `<div class="tap-target-content">
  <ng-content></ng-content>
</div>
`,
                styles: [`:host{display:block}`],
            },] },
];
/** @nocollapse */
MzFeatureDiscoveryComponent.ctorParameters = () => [
    { type: ElementRef, },
];
MzFeatureDiscoveryComponent.propDecorators = {
    "targetClass": [{ type: HostBinding, args: ['class.tap-target',] },],
    "targetId": [{ type: HostBinding, args: ['attr.data-activates',] }, { type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzFeatureDiscoveryModule {
}
MzFeatureDiscoveryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    MzFeatureDiscoveryComponent,
                ],
                exports: [
                    MzFeatureDiscoveryComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: (previousValue) => this.handleAlign(previousValue),
            icon: () => this.handleIcon(),
            size: (previousValue) => this.handleSize(previousValue),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'material-icons', true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleAlign(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.align) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
        }
    }
    /**
     * @return {?}
     */
    handleIcon() {
        this.renderer.setElementProperty(this.elementRef.nativeElement, 'innerHTML', this.icon);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleSize(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.size) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.size, true);
        }
    }
}
MzIconDirective.decorators = [
    { type: Directive, args: [{
                selector: 'i[mz-icon], i[mzIcon]',
            },] },
];
/** @nocollapse */
MzIconDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzIconDirective.propDecorators = {
    "align": [{ type: Input },],
    "icon": [{ type: Input },],
    "size": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconModule {
}
MzIconModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzIconDirective,
                ],
                exports: [
                    MzIconDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconMdiDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: (previousValue) => this.handleAlign(previousValue),
            flip: (previousValue) => this.handleFlip(previousValue),
            icon: (previousValue) => this.handleIcon(previousValue),
            rotate: (previousValue) => this.handleRotate(previousValue),
            size: (previousValue) => this.handleSize(previousValue),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi', true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleAlign(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.align) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
        }
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleFlip(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + this.flip, !!this.flip);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleIcon(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.icon, true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleRotate(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + this.rotate, !!this.rotate);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleSize(previousValue) {
        if (!this.size) {
            this.size = '24px';
        }
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.size, true);
    }
}
MzIconMdiDirective.decorators = [
    { type: Directive, args: [{
                selector: 'a[mz-icon-mdi], a[mzIconMdi], i[mz-icon-mdi], i[mzIconMdi]',
            },] },
];
/** @nocollapse */
MzIconMdiDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzIconMdiDirective.propDecorators = {
    "align": [{ type: Input },],
    "flip": [{ type: Input },],
    "icon": [{ type: Input },],
    "rotate": [{ type: Input },],
    "size": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconMdiModule {
}
MzIconMdiModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzIconMdiDirective,
                ],
                exports: [
                    MzIconMdiDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputContainerComponent {
}
MzInputContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-input-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzInputContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputPrefixDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
    }
}
MzInputPrefixDirective.decorators = [
    { type: Directive, args: [{
                selector: 'i[mzInputPrefix], i[mz-input-prefix]',
            },] },
];
/** @nocollapse */
MzInputPrefixDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initInputSubscription();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            autocomplete: () => this.handleAutocomplete(),
            dataError: () => this.handleDataError(),
            dataSuccess: () => this.handleDataSuccess(),
            label: () => this.handleLabel(),
            length: () => this.handleLength(),
            placeholder: () => this.handlePlaceholder(),
            validate: () => this.handleValidate(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputElement = $(this.elementRef.nativeElement);
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    initInputSubscription() {
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(() => this.setLabelActive());
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-input directive must be placed inside an [mz-input-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleAutocomplete() {
        const /** @type {?} */ isAutocomplete = this.autocomplete != null
            && this.autocomplete.data != null
            && Object.keys(this.autocomplete.data).length > 0;
        this.renderer.setElementClass(this.inputElement[0], 'autocomplete', isAutocomplete);
        if (this.autocomplete != null) {
            // wait until autocomplete is defined before to invoke
            // see issue: https://github.com/Dogfalo/materialize/issues/4401
            interval(100)
                .pipe(skipWhile(() => !this.inputElement['autocomplete']), first())
                .subscribe(() => this.renderer.invokeElementMethod(this.inputElement, 'autocomplete', [this.autocomplete]));
        }
    }
    /**
     * @return {?}
     */
    handleDataError() {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-error', this.dataError);
    }
    /**
     * @return {?}
     */
    handleDataSuccess() {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-success', this.dataSuccess);
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleLength() {
        const /** @type {?} */ length = this.length ? this.length.toString() : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'data-length', length);
        if (length) {
            this.setCharacterCount();
        }
        else {
            this.removeCharacterCount();
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty
        // note that it still trigger validation on focus but this is better than nothing
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(() => this.ngControl.control.markAsPristine());
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    handleValidate() {
        this.renderer.setElementClass(this.inputElement[0], 'validate', this.validate);
        if (this.validate) {
            // force validation
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
        }
        else {
            this.removeValidationClasses();
        }
    }
    /**
     * @return {?}
     */
    setCharacterCount() {
        this.renderer.invokeElementMethod(this.inputElement, 'characterCounter');
        // force validation
        // need setTimeout otherwise it wont trigger validation right away
        setTimeout(() => {
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['input']);
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
        });
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances
        // for example: forcing validation for example, reseting form programmaticaly, ...
        setTimeout(() => {
            const /** @type {?} */ inputValue = (/** @type {?} */ (this.inputElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
    /**
     * @return {?}
     */
    removeCharacterCount() {
        this.renderer.invokeElementMethod(this.inputElement.siblings('.character-counter'), 'remove');
        this.removeValidationClasses();
    }
    /**
     * @return {?}
     */
    removeValidationClasses() {
        // reset valid/invalid state
        this.renderer.setElementClass(this.inputElement[0], 'invalid', false);
        this.renderer.setElementClass(this.inputElement[0], 'valid', false);
    }
}
MzInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzInput], input[mz-input]',
            },] },
];
/** @nocollapse */
MzInputDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: Renderer, },
];
MzInputDirective.propDecorators = {
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "autocomplete": [{ type: Input },],
    "dataError": [{ type: Input },],
    "dataSuccess": [{ type: Input },],
    "label": [{ type: Input },],
    "length": [{ type: Input },],
    "validate": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputModule {
}
MzInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzInputContainerComponent,
                    MzInputDirective,
                    MzInputPrefixDirective,
                ],
                exports: [
                    MzInputContainerComponent,
                    MzInputDirective,
                    MzInputPrefixDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzMediaService {
    constructor() {
        this.mediaBreakpoints = [
            { alias: 's', minWidth: 0, maxWidth: 600 },
            { alias: 'm', minWidth: 601, maxWidth: 992 },
            { alias: 'l', minWidth: 993, maxWidth: 1200 },
            { alias: 'xl', minWidth: 1201, maxWidth: Number.MAX_VALUE },
        ];
        this.matchOperators = [
            {
                operator: 'gt',
                match: (breakpoint) => window.innerWidth > breakpoint.maxWidth,
            },
            {
                operator: 'lt',
                match: (breakpoint) => window.innerWidth < breakpoint.minWidth,
            },
            {
                operator: null,
                match: (breakpoint) => window.innerWidth >= breakpoint.minWidth && window.innerWidth <= breakpoint.maxWidth,
            },
        ];
        this.media = this.registerWindowResizeListener();
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    isActive(breakpoint) {
        return new Observable(subscriber => {
            this.media.subscribe((media) => {
                try {
                    subscriber.next(this.isActiveBreakpoint(breakpoint));
                }
                catch (/** @type {?} */ error) {
                    subscriber.error(error);
                }
            });
        });
    }
    /**
     * @return {?}
     */
    registerWindowResizeListener() {
        return fromEvent(window, 'resize')
            .pipe(map(() => this.getWindowMedia()), startWith(this.getWindowMedia()), publishReplay(1), refCount());
    }
    /**
     * @return {?}
     */
    getWindowMedia() {
        return {
            alias: this.mediaBreakpoints.find((breakpoint) => window.innerWidth <= breakpoint.maxWidth).alias,
            windowHeight: window.innerHeight,
            windowWidth: window.innerWidth,
        };
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    isActiveBreakpoint(breakpoint) {
        let /** @type {?} */ matchOperator;
        let /** @type {?} */ mediaBreakpoint;
        if (breakpoint) {
            const /** @type {?} */ fragments = breakpoint.split('-');
            if (fragments.length === 1) {
                matchOperator = this.matchOperators.find(x => x.operator === null);
                mediaBreakpoint = this.mediaBreakpoints.find(x => x.alias === fragments[0]);
            }
            else if (fragments.length === 2) {
                matchOperator = this.matchOperators.find(x => x.operator === fragments[0]);
                mediaBreakpoint = this.mediaBreakpoints.find(x => x.alias === fragments[1]);
            }
        }
        if (!mediaBreakpoint || !matchOperator) {
            throw Error(`MzMediaService.isActive parameter is invalid: '${breakpoint}' is not a recognized breakpoint.`);
        }
        return matchOperator.match(mediaBreakpoint);
    }
}
MzMediaService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MzMediaService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzMediaModule {
}
MzMediaModule.decorators = [
    { type: NgModule, args: [{
                providers: [MzMediaService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalComponent extends HandlePropChanges {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.close = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initModal();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.modalElement = $(this.modalElementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            options: () => this.handleOptions(),
        };
    }
    /**
     * @return {?}
     */
    initModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', [this.options]);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleOptions() {
        // extend complete function to emit close event on callback return
        const /** @type {?} */ originalCompleteFn = this.options && this.options.complete || (() => { });
        this.options = Object.assign({}, this.options, {
            complete: () => {
                originalCompleteFn();
                this.close.emit();
            },
        });
    }
    /**
     * @return {?}
     */
    openModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', ['open']);
    }
    /**
     * @return {?}
     */
    closeModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', ['close']);
    }
}
MzModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-modal',
                template: `<div #modal
  class="modal"
  [class.modal-fixed-footer]="fixedFooter"
  [class.bottom-sheet]="bottomSheet"
  [class.modal-fullscreen]="fullscreen"
>
  <div class="modal-content">
    <ng-content select="mz-modal-header"></ng-content>
    <div>
      <ng-content select="mz-modal-content"></ng-content>
    </div>
  </div>
  <div class="modal-footer">
    <ng-content select="mz-modal-footer"></ng-content>
  </div>
</div>
`,
                styles: [`.modal:not(.bottom-sheet).modal-fullscreen{top:12px!important;margin:0 auto;width:calc(100% - 24px);height:calc(100% - 24px);max-height:none}.modal.bottom-sheet.modal-fullscreen{height:100%;max-height:none}/deep/ mz-modal-header h5,/deep/ mz-modal-header h6{margin-top:0}`],
            },] },
];
/** @nocollapse */
MzModalComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzModalComponent.propDecorators = {
    "bottomSheet": [{ type: Input },],
    "fixedFooter": [{ type: Input },],
    "fullscreen": [{ type: Input },],
    "options": [{ type: Input },],
    "close": [{ type: Output },],
    "modalElementRef": [{ type: ViewChild, args: ['modal',] },],
};
class MzModalHeaderDirective {
}
MzModalHeaderDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-modal-header' },] },
];
class MzModalContentDirective {
}
MzModalContentDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-modal-content' },] },
];
class MzModalFooterDirective {
}
MzModalFooterDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-modal-footer' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalCloseDirective {
    /**
     * @param {?} modalComponent
     */
    constructor(modalComponent) {
        this.modalComponent = modalComponent;
    }
    /**
     * @return {?}
     */
    onclick() {
        this.modalComponent.closeModal();
    }
}
MzModalCloseDirective.decorators = [
    { type: Directive, args: [{
                selector: 'a[mzModalClose], button[mzModalClose], a[mz-modal-close], button[mz-modal-close]',
            },] },
];
/** @nocollapse */
MzModalCloseDirective.ctorParameters = () => [
    { type: MzModalComponent, },
];
MzModalCloseDirective.propDecorators = {
    "onclick": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalService {
    /**
     * @param {?} injectionService
     */
    constructor(injectionService) {
        this.injectionService = injectionService;
    }
    /**
     * Open modal component.
     * @param {?} componentClass
     * @param {?=} options
     * @return {?}
     */
    open(componentClass, options = {}) {
        const /** @type {?} */ componentRef = this.injectionService.appendComponent(componentClass, options);
        componentRef.instance.modalComponent.close
            .pipe(first())
            .subscribe(() => {
            componentRef.destroy();
        });
        return componentRef;
    }
}
MzModalService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MzModalService.ctorParameters = () => [
    { type: MzInjectionService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalModule {
}
MzModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [MzInjectionModule],
                declarations: [
                    MzModalCloseDirective,
                    MzModalComponent,
                    MzModalContentDirective,
                    MzModalFooterDirective,
                    MzModalHeaderDirective,
                ],
                exports: [
                    MzModalCloseDirective,
                    MzModalComponent,
                    MzModalContentDirective,
                    MzModalFooterDirective,
                    MzModalHeaderDirective,
                ],
                providers: [MzModalService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarItemContainerComponent {
}
MzNavbarItemContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-navbar-item-container',
                template: `<ul id="nav-mobile" class="{{ align }}">
  <ng-content></ng-content>
</ul>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzNavbarItemContainerComponent.propDecorators = {
    "align": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarItemComponent {
}
MzNavbarItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-navbar-item',
                template: `<li 
  class="{{ itemClass }}"
  [class.active]="active"
>
  <ng-content></ng-content>
</li>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzNavbarItemComponent.propDecorators = {
    "active": [{ type: Input },],
    "itemClass": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarComponent {
}
MzNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-navbar',
                template: `<nav>
  <div class="nav-wrapper {{ navbarClass }}">
    <ng-content></ng-content>
  </div>
</nav>`,
                styles: [`.nav-wrapper /deep/ .btn i{line-height:inherit}`],
            },] },
];
/** @nocollapse */
MzNavbarComponent.propDecorators = {
    "navbarClass": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarModule {
}
MzNavbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzNavbarComponent,
                    MzNavbarItemComponent,
                    MzNavbarItemContainerComponent,
                ],
                exports: [
                    MzNavbarComponent,
                    MzNavbarItemComponent,
                    MzNavbarItemContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationPageButtonComponent {
}
MzPaginationPageButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-pagination-page-button',
                template: `<li [class.active]="active"
  [class.disabled]="disabled"
  [class.waves-effect]="!active && !disabled">
  <ng-content></ng-content>
</li>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzPaginationPageButtonComponent.propDecorators = {
    "active": [{ type: Input },],
    "disabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationComponent extends HandlePropChanges {
    constructor() {
        super();
        this.currentPage = 1;
        this.enableFirstAndLastPageButtons = false;
        this.maxPageButtons = 5;
        this.pageChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get totalPages() {
        return Math.ceil(this.totalItems / this.itemsPerPage);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.renderButtons();
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    changeCurrentPage(pageNumber) {
        this.currentPage = pageNumber;
        this.pageChange.emit(pageNumber);
        this.renderButtons();
    }
    /**
     * @return {?}
     */
    firstPage() {
        this.changeCurrentPage(1);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            currentPage: () => this.renderButtons(),
            itemsPerPage: () => this.renderButtons(),
            maxPageButtons: () => this.renderButtons(),
            totalItems: () => this.renderButtons(),
        };
    }
    /**
     * @return {?}
     */
    lastPage() {
        this.changeCurrentPage(this.totalPages);
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (this.currentPage < this.totalPages) {
            const /** @type {?} */ nextPage = this.currentPage + 1;
            this.changeCurrentPage(nextPage);
        }
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (this.currentPage !== 1) {
            const /** @type {?} */ previousPage = this.currentPage - 1;
            this.changeCurrentPage(previousPage);
        }
    }
    /**
     * @return {?}
     */
    renderButtons() {
        const /** @type {?} */ buttonsCount = Math.min(this.maxPageButtons, this.totalPages);
        const /** @type {?} */ maxPosition = this.totalPages - buttonsCount;
        const /** @type {?} */ halfButtons = Math.floor(buttonsCount / 2);
        let /** @type {?} */ hiddenPagesBefore = (this.currentPage - halfButtons);
        if (hiddenPagesBefore > maxPosition) {
            hiddenPagesBefore = maxPosition + 1;
        }
        const /** @type {?} */ from = Math.max(hiddenPagesBefore, 1);
        const /** @type {?} */ to = Math.min(this.totalPages, from + this.maxPageButtons - 1);
        this.pages = Array(buttonsCount).fill(0).map((x, i) => from + i);
        if (this.currentPage > this.totalPages) {
            this.currentPage = this.pages[0];
        }
    }
}
MzPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-pagination',
                template: `
  <ul class="pagination">
    <mz-pagination-page-button [disabled]="currentPage === 1" *ngIf="enableFirstAndLastPageButtons">
      <a (click)="firstPage()"><i mz-icon [icon]="'first_page'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === 1">
      <a (click)="previousPage()"><i mz-icon [icon]="'chevron_left'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button *ngFor="let page of pages"
      [active]="page === currentPage"
    >
      <a (click)="changeCurrentPage(page)">{{ page }}</a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === totalPages">
      <a (click)="nextPage()"><i mz-icon [icon]="'chevron_right'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === totalPages" *ngIf="enableFirstAndLastPageButtons">
      <a (click)="lastPage()"><i mz-icon [icon]="'last_page'"></i></a>
    </mz-pagination-page-button>
  </ul>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzPaginationComponent.ctorParameters = () => [];
MzPaginationComponent.propDecorators = {
    "currentPage": [{ type: Input },],
    "enableFirstAndLastPageButtons": [{ type: Input },],
    "itemsPerPage": [{ type: Input },],
    "maxPageButtons": [{ type: Input },],
    "totalItems": [{ type: Input },],
    "pageChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationModule {
}
MzPaginationModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MzIconModule,
                ],
                declarations: [
                    MzPaginationComponent,
                    MzPaginationPageButtonComponent,
                ],
                exports: [
                    MzPaginationComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzParallaxComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderer.setElementStyle(this.parallaxContainer.nativeElement, 'height', isNaN(this.height) ? '500px' : this.height + 'px');
        this.renderer.invokeElementMethod($(this.parallax.nativeElement), 'parallax');
    }
}
MzParallaxComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-parallax',
                template: `<div #parallaxContainer class="parallax-container">
  <div #parallax class="parallax">
    <ng-content></ng-content>
  </div>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzParallaxComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzParallaxComponent.propDecorators = {
    "height": [{ type: Input },],
    "parallax": [{ type: ViewChild, args: ['parallax',] },],
    "parallaxContainer": [{ type: ViewChild, args: ['parallaxContainer',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzParallaxModule {
}
MzParallaxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzParallaxComponent],
                exports: [MzParallaxComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzProgressComponent {
}
MzProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-progress',
                template: `<div class="progress {{ backgroundClass }}">

  <div
    class="progress-bar {{ progressClass }}"
    [class.determinate]="percentage != null"
    [class.indeterminate]="percentage == null"
    [style.width.%]="percentage">
  </div>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzProgressComponent.propDecorators = {
    "backgroundClass": [{ type: Input },],
    "percentage": [{ type: Input },],
    "progressClass": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzProgressModule {
}
MzProgressModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzProgressComponent],
                exports: [MzProgressComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonContainerComponent {
}
MzRadioButtonContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-radio-button-container',
                template: `<p class="radio-button-field">
  <ng-content></ng-content>
</p>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            withGap: () => this.handleWithGap(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputElement = $(this.elementRef.nativeElement);
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.radio-button-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Radio Button must be placed inside a [mz-radio-button-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleWithGap() {
        this.renderer.setElementClass(this.inputElement[0], 'with-gap', this.withGap);
    }
}
MzRadioButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzRadioButton], input[mz-radio-button]',
            },] },
];
/** @nocollapse */
MzRadioButtonDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzRadioButtonDirective.propDecorators = {
    "id": [{ type: HostBinding }, { type: Input },],
    "label": [{ type: Input },],
    "withGap": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonModule {
}
MzRadioButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzRadioButtonDirective,
                    MzRadioButtonContainerComponent,
                ],
                exports: [
                    MzRadioButtonDirective,
                    MzRadioButtonContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class ErrorMessageResource {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzErrorMessageComponent {
    constructor() {
        this.errorMessage = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buildErrorMessage();
        this.controlStatusChangesSubscription = this.control.statusChanges.subscribe(() => this.buildErrorMessage());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.controlStatusChangesSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    buildErrorMessage() {
        this.errorMessage = '';
        if (this.control.errors && this.errorMessageResource) {
            Object.keys(this.control.errors).forEach(key => {
                this.errorMessage += this.errorMessageResource[key] + ' ';
            });
        }
    }
}
MzErrorMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-error-message',
                template: `<div [@enterAnimation]="errorMessage" class="invalid" *ngIf="(control.touched || control.dirty) && control.invalid && errorMessage">{{ errorMessage }}</div>`,
                styles: [`div.invalid{color:#e30613;font-size:.8rem;opacity:1;overflow-wrap:break-word}input:not([type=checkbox])+label+:host div.invalid,mz-select-container :host div.invalid,textarea+label+:host div.invalid{margin-top:-19px;min-height:19px}`],
                animations: [
                    trigger('enterAnimation', [
                        transition(':enter', [
                            style({ transform: 'translateY(-5px)', opacity: 0 }),
                            animate('300ms', style({ transform: 'translateY(0)', opacity: 1 })),
                        ]),
                        transition(':leave', [
                            style({ transform: 'translateY(0)', opacity: 1 }),
                            animate('300ms', style({ transform: 'translateY(-5px)', opacity: 0 })),
                        ]),
                    ]),
                ],
            },] },
];
/** @nocollapse */
MzErrorMessageComponent.propDecorators = {
    "control": [{ type: Input },],
    "errorMessageResource": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzValidationComponent {
    /**
     * @param {?} elementRef
     * @param {?} resolver
     * @param {?} viewContainerRef
     * @param {?} ngControl
     * @param {?} renderer
     */
    constructor(elementRef, resolver, viewContainerRef, ngControl, renderer) {
        this.elementRef = elementRef;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.renderer = renderer;
        this.errorMessageComponent = null;
        this._formControlDisabled = false;
        this._required = false;
    }
    /**
     * @return {?}
     */
    get required() { return this._required; }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) { this._required = (value != null && `${value}` !== 'false'); }
    /**
     * @return {?}
     */
    get formControlDisabled() { return this._formControlDisabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set formControlDisabled(value) {
        this._formControlDisabled = value;
        if (this._formControlDisabled) {
            this.ngControl.control.disable();
        }
        else {
            this.ngControl.control.enable();
        }
    }
    /**
     * @return {?}
     */
    get elementToAddValidation() {
        return this.isNativeSelectElement
            ? this.inputSelectDropdown
            : this.nativeElement;
    }
    /**
     * @return {?}
     */
    get inputSelectDropdown() {
        return this.nativeElement.siblings('input.select-dropdown');
    }
    /**
     * @return {?}
     */
    get isNativeSelectElement() {
        return this.nativeElement[0].nodeName === 'SELECT';
    }
    /**
     * @param {?} target
     * @return {?}
     */
    onFocusOut(target) {
        this.ngControl.control.markAsTouched();
        this.setValidationState();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initElements();
        this.initErrorMessageComponent();
        this.subscribeStatusChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.statusChangesSubscription.unsubscribe();
        this.errorMessageComponent.destroy();
    }
    /**
     * @param {?} element
     * @return {?}
     */
    clearValidationState(element) {
        this.renderer.setElementClass(element[0], 'valid', false);
        this.renderer.setElementClass(element[0], 'invalid', false);
    }
    /**
     * @return {?}
     */
    createRequiredSpanElement() {
        if (this.required && this.labelElement) {
            const /** @type {?} */ spanElement = document.createElement('span');
            spanElement.setAttribute('class', 'placeholder-required');
            spanElement.textContent = ' *';
            this.renderer.invokeElementMethod(this.labelElement, 'appendChild', [spanElement]);
        }
    }
    /**
     * @return {?}
     */
    initElements() {
        this.labelElement = $('label[for="' + this.id + '"]')[0];
        this.nativeElement = $(this.elementRef.nativeElement);
        this.createRequiredSpanElement();
    }
    /**
     * @return {?}
     */
    initErrorMessageComponent() {
        const /** @type {?} */ errorMessageFactory = this.resolver.resolveComponentFactory(MzErrorMessageComponent);
        this.errorMessageComponent = this.viewContainerRef.createComponent(errorMessageFactory);
        this.errorMessageComponent.instance.errorMessageResource = this.errorMessageResource;
        this.errorMessageComponent.instance.control = this.ngControl.control;
        this.errorMessageComponent.changeDetectorRef.detectChanges();
        const /** @type {?} */ errorMessage = this.nativeElement.parent().children('mz-error-message');
        this.renderer.invokeElementMethod(errorMessage, 'insertAfter', [this.labelElement]);
    }
    /**
     * @return {?}
     */
    setValidationState() {
        // to handle reset form
        if (this.ngControl.control.untouched && this.ngControl.control.pristine) {
            this.clearValidationState(this.elementToAddValidation);
            return;
        }
        // to handle field validity
        if (this.ngControl.control.enabled) {
            if (this.ngControl.control.valid) {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', true);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', false);
            }
            else {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', false);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', true);
            }
        }
        else {
            this.clearValidationState(this.elementToAddValidation);
        }
    }
    /**
     * @return {?}
     */
    subscribeStatusChanges() {
        this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe((status) => {
            // TODO Find a better way to handle validation after the form subscription. (see demo form-validation)
            // wait for the valueChanges method from FormGroup to have been triggered before handling the validation state
            // /!\ race condition warning /!\
            setTimeout(() => this.setValidationState());
        });
    }
}
MzValidationComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'mz-validation, [mz-validation], [mzValidation]',
                template: `<ng-content></ng-content>`,
                styles: [`.select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}`],
            },] },
];
/** @nocollapse */
MzValidationComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ComponentFactoryResolver, },
    { type: ViewContainerRef, },
    { type: NgControl, },
    { type: Renderer, },
];
MzValidationComponent.propDecorators = {
    "id": [{ type: Input },],
    "errorMessageResource": [{ type: Input },],
    "required": [{ type: HostBinding, args: ['attr.required',] }, { type: Input },],
    "formControlDisabled": [{ type: Input },],
    "onFocusOut": [{ type: HostListener, args: ['focusout', ['$event.target'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     * @param {?} renderer
     */
    constructor(elementRef, changeDetectorRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.renderer = renderer;
        this.update = new EventEmitter();
        this.suspend = false;
    }
    /**
     * @return {?}
     */
    get inputElement() {
        return this.selectElement.siblings('input.select-dropdown');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initOnChange();
        this.handleProperties();
        // must be done after handlePlaceholder
        this.initSelectedOption();
        // must be done after handleProperties
        this.initMaterialSelect();
        // must be done after initMaterialSelect
        this.listenOptionChanges();
        this.initFilledIn();
        this.handleDOMEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.renderer.invokeElementMethod(this.selectElement, 'material_select', ['destroy']);
        this.selectElement.off();
        this.mutationObserver.disconnect();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            disabled: () => this.handleDisabled(),
            label: () => this.handleLabel(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.selectElement = $(this.elementRef.nativeElement);
        this.selectContainerElement = $(this.elementRef.nativeElement).parents('.input-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * Need to be done after material_select has been invoked or else the multi-select
     * options are not yet in the DOM as it loops on rendered options
     * @return {?}
     */
    initFilledIn() {
        this.checkboxElements = this.selectContainerElement.find(':checkbox');
        this.handlers['filledIn'] = () => this.handleFilledIn();
        this.handleFilledIn();
    }
    /**
     * @return {?}
     */
    initMaterialSelect() {
        this.renderer.invokeElementMethod(this.selectElement, 'material_select');
    }
    /**
     * Trigger the native change event from select element instead of the JQuery.
     * An issue on Github is open about this problem : https://github.com/Dogfalo/materialize/issues/2843
     * This method should be removed when this issue is revolved.
     * @return {?}
     */
    initOnChange() {
        this.selectElement.on('change', (event) => {
            if (!this.suspend) {
                this.suspend = true;
                const /** @type {?} */ customEvent = document.createEvent('CustomEvent');
                customEvent.initCustomEvent('change', true, false, event.target.value);
                this.renderer.invokeElementMethod(this.selectElement[0], 'dispatchEvent', [customEvent]);
            }
        });
        // Stop the propagation of change event
        this.selectElement[0].addEventListener('change', () => {
            this.suspend = false;
        });
    }
    /**
     * @return {?}
     */
    handleDOMEvents() {
        this.inputElement.on('blur focus', (event) => {
            const /** @type {?} */ customEvent = document.createEvent('CustomEvent');
            customEvent.initCustomEvent(event.type, true, false, event.target);
            this.selectElement[0].dispatchEvent(customEvent);
        });
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.selectElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.selectContainerElement.length === 0) {
            console.error('Select with mz-select directive must be place inside a [mz-select-container] tag', this.selectElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initSelectedOption() {
        const /** @type {?} */ firstOptionElement = this.selectElement.children().first();
        if (firstOptionElement.length > 0
            && this.selectElement.children('option[selected]').length === 0
            && !this.selectElement[0].hasAttribute('multiple')) {
            this.renderer.setElementAttribute(firstOptionElement[0], 'selected', '');
        }
    }
    /**
     * @return {?}
     */
    handleDisabled() {
        // when disabled is null/undefined that means the property has not been used on the element
        // but it might be set by another process (for example reactive form applies disabled attribute itself)
        // therefore we don't want to remove or add it here
        if (this.disabled != null) {
            this.renderer.setElementProperty(this.selectElement[0], 'disabled', !!this.disabled);
            this.updateMaterialSelect();
        }
    }
    /**
     * @return {?}
     */
    handleLabel() {
        if (this.label != null) {
            this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
        }
    }
    /**
     * @return {?}
     */
    handleFilledIn() {
        if (this.checkboxElements.length > 0) {
            this.checkboxElements.toArray().forEach(checkboxElement => {
                this.renderer.setElementClass(checkboxElement, 'filled-in', !!this.filledIn);
            });
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholderElement = this.selectElement.children(':disabled').first();
        // if placeholder element exists
        if (placeholderElement.length > 0) {
            if (this.placeholder) {
                // update existing placeholder element
                this.renderer.invokeElementMethod(placeholderElement, 'text', [this.placeholder]);
            }
            else {
                // remove existing placeholder element
                this.renderer.invokeElementMethod(placeholderElement, 'remove');
                // Force trigger change event since it's not triggered when value change programmatically
                this.renderer.invokeElementMethod(this.selectElement, 'change');
                // Required if we don't want exception "Expression has changed after it was checked." https://github.com/angular/angular/issues/6005
                this.changeDetectorRef.detectChanges();
            }
        }
        else {
            if (this.placeholder) {
                // add placeholder element
                const /** @type {?} */ placeholderText = document.createTextNode(this.placeholder);
                const /** @type {?} */ placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.value = null;
                placeholderOption.appendChild(placeholderText);
                this.renderer.invokeElementMethod(this.selectElement, 'prepend', [placeholderOption]);
            }
        }
        this.initMaterialSelect();
    }
    /**
     * @return {?}
     */
    listenOptionChanges() {
        const /** @type {?} */ mutationObserverConfiguration = {
            childList: true,
            subtree: true,
        };
        this.mutationObserver = new MutationObserver((mutations) => {
            this.updateMaterialSelect();
        });
        this.mutationObserver.observe(this.selectElement[0], mutationObserverConfiguration);
    }
    /**
     * @return {?}
     */
    updateMaterialSelect() {
        this.initMaterialSelect();
        if (this.filledIn) {
            this.initFilledIn();
        }
        this.handleDOMEvents();
        // wait for materialize select to be initialized
        // /!\ race condition warning /!\
        setTimeout(() => this.update.emit());
    }
}
MzSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: 'select[mzSelect], select[mz-select]',
            },] },
];
/** @nocollapse */
MzSelectDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: Renderer, },
];
MzSelectDirective.propDecorators = {
    "id": [{ type: Input },],
    "disabled": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "filledIn": [{ type: Input },],
    "update": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectContainerComponent {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initControlSubscription();
        this.initSelectSubscription();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeControlSubscription();
        this.removeSelectSubscription();
    }
    /**
     * @return {?}
     */
    initControlSubscription() {
        if (this.ngControl) {
            this.mzSelectDirective.disabled = this.ngControl.control.disabled;
            this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe((status) => {
                // to handle enabling/disabling formControl
                const /** @type {?} */ disabled = status === 'DISABLED';
                if (disabled !== this.mzSelectDirective.disabled) {
                    this.mzSelectDirective.disabled = disabled;
                    this.mzSelectDirective.handleDisabled();
                }
            });
            this.selectValueSubscription = this.ngControl.valueChanges.subscribe((value) => {
                // to synchronize input and select when value changes programmatically
                const /** @type {?} */ isDropdownOpen = this.mzSelectDirective.inputElement.hasClass('active');
                const /** @type {?} */ inputValue = this.mzSelectDirective.inputElement.val();
                const /** @type {?} */ options = this.mzSelectDirective.selectElement.children('option');
                const /** @type {?} */ selectedOptions = options.filter('option:selected').toArray();
                const /** @type {?} */ disabledOptions = options.filter(':disabled').toArray();
                const /** @type {?} */ selectedOptionText = selectedOptions.length === 0
                    ? disabledOptions.map(option => option.textContent)[0]
                    : selectedOptions.map(option => option.textContent).join(', ');
                if (inputValue !== selectedOptionText && !isDropdownOpen) {
                    this.mzSelectDirective.updateMaterialSelect();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    initSelectSubscription() {
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update
                .subscribe(() => this.registerOnBlur())
                .next();
        }
    }
    /**
     * @return {?}
     */
    registerOnBlur() {
        this.mzSelectDirective.inputElement.on('blur', () => {
            if (this.ngControl) {
                this.ngControl.control.markAsTouched();
            }
            if (this.mzValidationComponent) {
                this.mzValidationComponent.setValidationState();
            }
        });
    }
    /**
     * @return {?}
     */
    removeControlSubscription() {
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update.unsubscribe();
            this.mzSelectDirective.inputElement.off();
        }
    }
    /**
     * @return {?}
     */
    removeSelectSubscription() {
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.selectValueSubscription) {
            this.selectValueSubscription.unsubscribe();
        }
    }
}
MzSelectContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-select-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [`.input-field:not(.inline){display:block}/deep/ .input-field .dropdown-content [type=checkbox]+label{top:-11px}`],
            },] },
];
/** @nocollapse */
MzSelectContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
    "mzSelectDirective": [{ type: ContentChild, args: [MzSelectDirective,] },],
    "mzValidationComponent": [{ type: ContentChild, args: [MzValidationComponent,] },],
    "ngControl": [{ type: ContentChild, args: [NgControl,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectModule {
}
MzSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzSelectDirective,
                    MzSelectContainerComponent,
                ],
                exports: [
                    MzSelectDirective,
                    MzSelectContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavCollapsibleHeaderComponent extends MzRemoveComponentHost {
}
MzSidenavCollapsibleHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-collapsible-header',
                template: `<a class="collapsible-header waves-effect"><ng-content></ng-content></a>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavCollapsibleComponent {
    /**
     * @param {?} changeDetectorRef
     * @param {?} renderer
     */
    constructor(changeDetectorRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCollapsible();
    }
    /**
     * @return {?}
     */
    initCollapsible() {
        const /** @type {?} */ options = {
            accordion: false,
            onClose: this.onClose,
            onOpen: this.onOpen,
        };
        // need setTimeout otherwise loading directly on the page cause an error
        setTimeout(() => this.renderer.invokeElementMethod($(this.collapsible.nativeElement), 'collapsible', [options]));
        this.changeDetectorRef.detectChanges();
    }
}
MzSidenavCollapsibleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-collapsible',
                template: `<li>
  <ul #collapsible class="collapsible collapsible-accordion">
    <li>
      <ng-content select="mz-sidenav-collapsible-header"></ng-content>
      <div class="collapsible-body">
        <ul>
          <ng-content select="mz-sidenav-collapsible-content"></ng-content>
        </ul>
      </div>
    </li>
  </ul>
</li>`,
                styles: [`:host /deep/ .collapsible-header{padding:0 32px}:host /deep/ .collapsible-header i{color:rgba(0,0,0,.54)}:host /deep/ .collapsible-body li a{font-weight:initial}`],
            },] },
];
/** @nocollapse */
MzSidenavCollapsibleComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: Renderer, },
];
MzSidenavCollapsibleComponent.propDecorators = {
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "collapsible": [{ type: ViewChild, args: ['collapsible',] },],
    "header": [{ type: ContentChild, args: [MzSidenavCollapsibleHeaderComponent,] },],
};
class MzSidenavCollapsibleContentDirective {
}
MzSidenavCollapsibleContentDirective.decorators = [
    { type: Directive, args: [{ selector: 'mz-sidenav-collapsible-content' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavDividerComponent {
}
MzSidenavDividerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-divider',
                template: `<li>
  <div class="divider"></div>
</li>`,
                styles: [`.divider{margin-bottom:8px}`],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavHeaderComponent {
}
MzSidenavHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-header',
                template: `<li class="sidenav-header">
  <ng-content></ng-content>
</li>`,
                styles: [`.sidenav-header{margin-bottom:8px}`],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavLinkComponent {
}
MzSidenavLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-link',
                template: `<li
  [class.active]="active"
>
  <ng-content></ng-content>
</li>
`,
                styles: [`:host /deep/ a[class*=mdi-]::before{color:rgba(0,0,0,.54);margin:-1px 32px 0 0;vertical-align:middle}:host /deep/ a i,:host /deep/ a i.material-icons,:host /deep/ a i[class*=mdi-]{margin-top:-1px}:host /deep/ a i.material-icons::before,:host /deep/ a i::before,:host /deep/ a i[class*=mdi-]::before{vertical-align:middle}`],
                encapsulation: ViewEncapsulation.Emulated,
            },] },
];
/** @nocollapse */
MzSidenavLinkComponent.propDecorators = {
    "active": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavSubheaderComponent {
}
MzSidenavSubheaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav-subheader',
                template: `<li>
  <a class="subheader">
    <ng-content></ng-content>
  </a>
</li>`,
                styles: [``],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavComponent {
    constructor() {
        this._opened = false;
    }
    /**
     * @return {?}
     */
    get opened() { return this._opened; }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) {
        this._opened = value;
        this.collapseButton.sideNav(this._opened ? 'show' : 'hide');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCollapseButton();
        this.initCollapsibleLinks();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.collapseButton.sideNav('destroy');
    }
    /**
     * @return {?}
     */
    initCollapseButton() {
        // fake button if no collapseButtonId is provided
        this.collapseButton = this.collapseButtonId
            ? $(`#${this.collapseButtonId}`)
            : $(document.createElement('template'));
        // add data-activates to collapse button
        this.collapseButton.attr('data-activates', this.id);
        // extend onOpen function to update opened state
        const /** @type {?} */ onOpen = this.onOpen || (() => { });
        this.onOpen = () => {
            onOpen();
            this._opened = true;
        };
        // extend onClose function to update opened state
        const /** @type {?} */ onClose = this.onClose || (() => { });
        this.onClose = () => {
            onClose();
            this._opened = false;
        };
        // initialize sidenav
        this.collapseButton.sideNav({
            closeOnClick: this.closeOnClick || false,
            draggable: this.draggable != null ? this.draggable : true,
            edge: this.edge || 'left',
            menuWidth: isNaN(this.width) ? 300 : this.width,
            onClose: this.onClose,
            onOpen: this.onOpen,
        });
    }
    /**
     * @return {?}
     */
    initCollapsibleLinks() {
        // initialize collapsible elements
        $(`#${this.id} .collapsible`).collapsible();
    }
}
MzSidenavComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav',
                template: `<ul class="side-nav {{ backgroundClass }}"
  [attr.id]="id"
  [class.fixed]="fixed">
  <ng-content></ng-content>
</ul>`,
            },] },
];
/** @nocollapse */
MzSidenavComponent.propDecorators = {
    "backgroundClass": [{ type: Input },],
    "closeOnClick": [{ type: Input },],
    "collapseButtonId": [{ type: Input },],
    "draggable": [{ type: Input },],
    "edge": [{ type: Input },],
    "fixed": [{ type: Input },],
    "id": [{ type: Input },],
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "width": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavModule {
}
MzSidenavModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzSidenavCollapsibleComponent,
                    MzSidenavCollapsibleContentDirective,
                    MzSidenavCollapsibleHeaderComponent,
                    MzSidenavComponent,
                    MzSidenavDividerComponent,
                    MzSidenavHeaderComponent,
                    MzSidenavLinkComponent,
                    MzSidenavSubheaderComponent,
                ],
                exports: [
                    MzSidenavCollapsibleComponent,
                    MzSidenavCollapsibleContentDirective,
                    MzSidenavCollapsibleHeaderComponent,
                    MzSidenavComponent,
                    MzSidenavDividerComponent,
                    MzSidenavHeaderComponent,
                    MzSidenavLinkComponent,
                    MzSidenavSubheaderComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSpinnerComponent {
}
MzSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-spinner',
                template: ` <div class="preloader-wrapper active {{ size }}">

    <div
      class="spinner-layer"
      [class.spinner-red-only]="color === 'red'"
      [class.spinner-green-only]="color === 'green'"
      [class.spinner-blue-only]="color === 'blue'"
      [class.spinner-yellow-only]="color === 'yellow'">

      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>

      <div class="gap-patch">
        <div class="circle"></div>
      </div>

      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>
  </div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzSpinnerComponent.propDecorators = {
    "color": [{ type: Input },],
    "size": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSpinnerModule {
}
MzSpinnerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzSpinnerComponent],
                exports: [MzSpinnerComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.handleInputType();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.switchElement = $(this.elementRef.nativeElement);
        this.switchContainerElement = $(this.elementRef.nativeElement).parent('label').parent('.switch');
        if (this.switchContainerElement.length === 0) {
            console.error('Input with mz-switch directive must be placed inside an [mz-switch-container] tag', this.switchElement);
            return;
        }
    }
    /**
     * @return {?}
     */
    handleInputType() {
        const /** @type {?} */ type = this.switchElement.attr('type');
        if (type !== 'checkbox') {
            this.renderer.setElementAttribute(this.switchElement[0], 'type', 'checkbox');
        }
    }
}
MzSwitchDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mzSwitch], [mz-switch]',
            },] },
];
/** @nocollapse */
MzSwitchDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzSwitchDirective.propDecorators = {
    "off": [{ type: Input },],
    "on": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchContainerComponent {
}
MzSwitchContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-switch-container',
                template: `<div class="switch">
  <label>
    <span class="off">{{ mzSwitchDirective?.off }}</span>
    <ng-content></ng-content>
    <span class="lever"></span>
    <span class="on">{{ mzSwitchDirective?.on }}</span>
  </label>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzSwitchContainerComponent.propDecorators = {
    "mzSwitchDirective": [{ type: ContentChild, args: [MzSwitchDirective,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchModule {
}
MzSwitchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzSwitchDirective,
                    MzSwitchContainerComponent,
                ],
                exports: [
                    MzSwitchDirective,
                    MzSwitchContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabItemComponent {
    /**
     * @return {?}
     */
    get link() {
        return this.tabItemId ? this.tabItemId : this.label.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    }
}
MzTabItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-tab-item',
                template: `<div id="{{ link }}" class="{{ class }}">
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzTabItemComponent.propDecorators = {
    "active": [{ type: Input },],
    "class": [{ type: Input },],
    "disabled": [{ type: Input },],
    "href": [{ type: Input },],
    "label": [{ type: Input },],
    "tabItemId": [{ type: Input },],
    "target": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabComponent {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initTabs();
    }
    /**
     * @return {?}
     */
    initTabs() {
        const /** @type {?} */ options = {
            onShow: this.onShow,
            responsiveThreshold: this.responsiveThreshold,
            swipeable: this.swipeable,
        };
        $(this.tabs.nativeElement).tabs(options);
    }
    /**
     * @param {?} tabItemId
     * @return {?}
     */
    selectTab(tabItemId) {
        $(this.tabs.nativeElement).tabs('select_tab', tabItemId);
    }
}
MzTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-tab',
                template: `<ul #tabs
  class="tabs"
  [class.tabs-fixed-width]="fixedTabWidth">
  <li class="tab" [class.disabled]="tabItem.disabled" *ngFor="let tabItem of tabItems.toArray()">
    <a [class.active]="tabItem.active"
      href="{{ tabItem.href ? tabItem.href : '#' + tabItem.link }}" target="{{ tabItem.target }}">
      {{ tabItem.label }}
    </a>
  </li>
</ul>
<div>
  <ng-content select="mz-tab-item"></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzTabComponent.propDecorators = {
    "fixedTabWidth": [{ type: Input },],
    "onShow": [{ type: Input },],
    "responsiveThreshold": [{ type: Input },],
    "swipeable": [{ type: Input },],
    "tabs": [{ type: ViewChild, args: ['tabs',] },],
    "tabItems": [{ type: ContentChildren, args: [MzTabItemComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabModule {
}
MzTabModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    MzTabComponent,
                    MzTabItemComponent,
                ],
                exports: [
                    MzTabComponent,
                    MzTabItemComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaContainerComponent {
}
MzTextareaContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-textarea-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [`:host /deep/ textarea{display:block}.input-field:not(.inline){display:block}`],
            },] },
];
/** @nocollapse */
MzTextareaContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaPrefixDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
    }
}
MzTextareaPrefixDirective.decorators = [
    { type: Directive, args: [{
                selector: 'i[mzTextareaPrefix], i[mz-textarea-prefix]',
            },] },
];
/** @nocollapse */
MzTextareaPrefixDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initTextareaSubscription();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.textareaValueSubscription) {
            this.textareaValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            length: () => this.handleLength(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.textareaElement = $(this.elementRef.nativeElement);
        this.textareaContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.labelElement = this.createLabelElement();
        this.initTextarea();
    }
    /**
     * @return {?}
     */
    initTextarea() {
        this.renderer.setElementClass(this.textareaElement[0], 'materialize-textarea', true);
    }
    /**
     * @return {?}
     */
    initTextareaSubscription() {
        if (this.ngControl) {
            this.textareaValueSubscription = this.ngControl.valueChanges.subscribe(() => this.setLabelActive());
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.textareaElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.textareaContainerElement.length === 0) {
            console.error('Textarea must be placed inside a [mz-textarea-container] tag', this.textareaElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        if (this.placeholder || this.textareaElement.val()) {
            this.renderer.setElementClass(this.labelElement[0], 'active', true);
        }
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleLength() {
        const /** @type {?} */ length = this.length ? this.length.toString() : null;
        this.renderer.setElementAttribute(this.textareaElement[0], 'data-length', length);
        if (length) {
            this.setCharacterCount();
        }
        else {
            this.removeCharacterCount();
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.textareaElement[0], 'placeholder', placeholder);
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setCharacterCount() {
        this.renderer.invokeElementMethod(this.textareaElement, 'characterCounter');
        // force validation
        // need setTimeout otherwise it wont trigger validation right away
        setTimeout(() => {
            this.renderer.invokeElementMethod(this.textareaElement, 'trigger', ['input']);
            this.renderer.invokeElementMethod(this.textareaElement, 'trigger', ['blur']);
        });
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances
        // for example: forcing validation for example, reseting form programmaticaly, ...
        setTimeout(() => {
            const /** @type {?} */ textareaValue = (/** @type {?} */ (this.textareaElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!textareaValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
    /**
     * @return {?}
     */
    removeCharacterCount() {
        this.renderer.invokeElementMethod(this.textareaElement.siblings('.character-counter'), 'remove');
        this.removeValidationClasses();
    }
    /**
     * @return {?}
     */
    removeValidationClasses() {
        // reset valid/invalid state
        this.renderer.setElementClass(this.textareaElement[0], 'invalid', false);
        this.renderer.setElementClass(this.textareaElement[0], 'valid', false);
    }
}
MzTextareaDirective.decorators = [
    { type: Directive, args: [{
                selector: 'textarea[mzTextarea], textarea[mz-textarea]',
            },] },
];
/** @nocollapse */
MzTextareaDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: Renderer, },
];
MzTextareaDirective.propDecorators = {
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "length": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaModule {
}
MzTextareaModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzTextareaContainerComponent,
                    MzTextareaDirective,
                    MzTextareaPrefixDirective,
                ],
                exports: [
                    MzTextareaContainerComponent,
                    MzTextareaDirective,
                    MzTextareaPrefixDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerContainerComponent {
}
MzTimepickerContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-timepicker-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``],
            },] },
];
/** @nocollapse */
MzTimepickerContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     */
    constructor(ngControl, changeDetectorRef, elementRef, renderer, zone) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        // materialize uses ClockPicker to create the timepicker
        // complete list of options is available at the following address
        // https://github.com/weareoutman/clockpicker#options
        this.options = {};
        this.stopChangePropagation = false;
    }
    /**
     * @return {?}
     */
    get clockpicker() {
        return $('.clockpicker');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initTimepicker();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // remove event handlers
        this.inputElement.off();
        // remove clockpicker added to body by default
        this.clockpicker.remove();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputContainerElement = /** @type {?} */ ($(this.elementRef.nativeElement).parent('.input-field'));
        this.inputElement = /** @type {?} */ ($(this.elementRef.nativeElement));
        this.labelElement = /** @type {?} */ (this.createLabelElement());
    }
    /**
     * @return {?}
     */
    initTimepicker() {
        // append clockpicker to body by default
        if (!this.options.container) {
            this.options.container = 'body';
        }
        // extend afterHide callback to set label active
        const /** @type {?} */ afterHide = this.options && this.options.afterHide || (() => { });
        this.options = Object.assign({}, this.options, {
            afterHide: () => {
                afterHide();
                this.setLabelActive();
            },
        });
        this.renderer.invokeElementMethod(this.inputElement, 'pickatime', [this.options]);
        if (this.ngControl) {
            // set ngControl value according to selected time in timepicker
            this.inputElement.on('change', (event) => {
                this.ngControl.control.setValue(event.target.value);
                // mark for change detection
                // fix form validation with ChangeDetectionStrategy.OnPush
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-timepicker directive must be placed inside an [mz-timepicker-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty and trigger validation
        // on page load... note that it still trigger validation on focus and would need a better fix
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => this.ngControl.control.markAsPristine());
            });
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need wait for zone to be stable otherwise it wont make label
        // float in some circonstances (clearing value programmatically for example)
        this.zone.onStable
            .pipe(first())
            .subscribe(() => {
            const /** @type {?} */ inputValue = this.inputElement[0].value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
}
MzTimepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[mzTimepicker], input[mz-timepicker]',
            },] },
];
/** @nocollapse */
MzTimepickerDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: NgZone, },
];
MzTimepickerDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.timepicker',] },],
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "options": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerModule {
}
MzTimepickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MzTimepickerDirective,
                    MzTimepickerContainerComponent,
                ],
                exports: [
                    MzTimepickerDirective,
                    MzTimepickerContainerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzToastService {
    /**
     * @param {?} message
     * @param {?} displayLength
     * @param {?=} className
     * @param {?=} completeCallback
     * @return {?}
     */
    show(message, displayLength, className, completeCallback) {
        Materialize.toast(message, displayLength, className, completeCallback);
    }
}
MzToastService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzToastModule {
}
MzToastModule.decorators = [
    { type: NgModule, args: [{
                providers: [MzToastService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTooltipDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initTooltip();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.targetElement) {
            this.initTooltip();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.renderer.invokeElementMethod(this.targetElement, 'tooltip', ['remove']);
    }
    /**
     * @return {?}
     */
    initElements() {
        this.targetElement = $(this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    initTooltip() {
        const /** @type {?} */ tooltipOptions = {
            delay: isNaN(this.delay) || this.delay == null ? 350 : this.delay,
            html: this.html || false,
            position: this.position || 'bottom',
            tooltip: this.tooltip,
        };
        this.renderer.invokeElementMethod(this.targetElement, 'tooltip', [tooltipOptions]);
    }
}
MzTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mzTooltip], [mz-tooltip]',
            },] },
];
/** @nocollapse */
MzTooltipDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzTooltipDirective.propDecorators = {
    "delay": [{ type: Input },],
    "html": [{ type: Input },],
    "position": [{ type: Input },],
    "tooltip": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTooltipModule {
}
MzTooltipModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MzTooltipDirective],
                exports: [MzTooltipDirective],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzValidationModule {
}
MzValidationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    MzErrorMessageComponent,
                    MzValidationComponent,
                ],
                entryComponents: [MzErrorMessageComponent],
                exports: [
                    MzErrorMessageComponent,
                    MzValidationComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MZ_MODULES = [
    CommonModule,
    FormsModule,
    MzBadgeModule,
    MzButtonModule,
    MzCardModule,
    MzCheckboxModule,
    MzChipModule,
    MzCollapsibleModule,
    MzCollectionModule,
    MzDatepickerModule,
    MzDropdownModule,
    MzFeatureDiscoveryModule,
    MzIconModule,
    MzIconMdiModule,
    MzInjectionModule,
    MzInputModule,
    MzMediaModule,
    MzModalModule,
    MzNavbarModule,
    MzPaginationModule,
    MzParallaxModule,
    MzProgressModule,
    MzRadioButtonModule,
    MzSelectModule,
    MzSidenavModule,
    MzSpinnerModule,
    MzSwitchModule,
    MzTabModule,
    MzTextareaModule,
    MzTimepickerModule,
    MzToastModule,
    MzTooltipModule,
    MzValidationModule,
];
/**
 * @deprecated
 * Import specific component modules instead (MzBadgeModule, MzCardModule, etc)
 * https://github.com/sherweb/ng2-materialize#materializemodule-deprecated
 */
class MaterializeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MaterializeModule,
        };
    }
}
MaterializeModule.decorators = [
    { type: NgModule, args: [{
                imports: MZ_MODULES,
                exports: MZ_MODULES,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MatchOperator {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class Media {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MediaBreakpoint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MzBaseModal {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.modalComponent.openModal();
    }
}
MzBaseModal.propDecorators = {
    "modalComponent": [{ type: ViewChild, args: [MzModalComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MzBadgeComponent, MzBadgeModule, MzButtonDirective, MzButtonModule, MzCardComponent, MzCardTitleDirective, MzCardContentDirective, MzCardActionDirective, MzCardModule, MzCheckboxContainerComponent, MzCheckboxDirective, MzCheckboxModule, MzChipInputComponent, MzChipComponent, MzChipModule, MzCollapsibleItemComponent, MzCollapsibleItemBodyDirective, MzCollapsibleItemHeaderDirective, MzCollapsibleComponent, MzCollapsibleModule, MzAvatarDirective, MzCollectionHeaderComponent, MzCollectionItemComponent, MzCollectionLinkDirective, MzCollectionComponent, MzCollectionModule, MzSecondaryContentDirective, MzDatepickerContainerComponent, MzDatepickerDirective, MzDatepickerModule, MzDropdownDividerComponent, MzDropdownItemComponent, MzDropdownComponent, MzDropdownModule, MzFeatureDiscoveryComponent, MzFeatureDiscoveryModule, MzIconDirective, MzIconModule, MzIconMdiDirective, MzIconMdiModule, MzInputContainerComponent, MzInputPrefixDirective, MzInputDirective, MzInputModule, MaterializeModule, MzMediaModule, MzMediaService, MatchOperator, Media, MediaBreakpoint, MzBaseModal, MzModalCloseDirective, MzModalComponent, MzModalHeaderDirective, MzModalContentDirective, MzModalFooterDirective, MzModalModule, MzModalService, MzNavbarComponent, MzNavbarModule, MzNavbarItemComponent, MzNavbarItemContainerComponent, MzPaginationPageButtonComponent, MzPaginationComponent, MzPaginationModule, MzParallaxComponent, MzParallaxModule, MzProgressComponent, MzProgressModule, MzRadioButtonContainerComponent, MzRadioButtonDirective, MzRadioButtonModule, MzSelectContainerComponent, MzSelectDirective, MzSelectModule, Handlers, HandlePropChanges, MzInjectionModule, MzInjectionService, MzRemoveComponentHost, MzSidenavComponent, MzSidenavModule, MzSidenavCollapsibleHeaderComponent, MzSidenavCollapsibleComponent, MzSidenavCollapsibleContentDirective, MzSidenavDividerComponent, MzSidenavHeaderComponent, MzSidenavLinkComponent, MzSidenavSubheaderComponent, MzSpinnerComponent, MzSpinnerModule, MzSwitchContainerComponent, MzSwitchDirective, MzSwitchModule, MzTabItemComponent, MzTabComponent, MzTabModule, MzTextareaContainerComponent, MzTextareaPrefixDirective, MzTextareaDirective, MzTextareaModule, MzTimepickerContainerComponent, MzTimepickerDirective, MzTimepickerModule, MzToastService, MzToastModule, MzTooltipDirective, MzTooltipModule, MzErrorMessageComponent, ErrorMessageResource, MzValidationComponent, MzValidationModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,